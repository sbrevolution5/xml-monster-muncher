{"version":3,"sources":["components/Conditions.js","components/DamageTypes.js","components/Saves.js","components/Skills.js","components/stats.js","components/ChallengeRating.js","containers/output.js","components/OneCard.js","containers/Cardset.js","containers/form.js","App.js","reportWebVitals.js","index.js"],"names":["Conditions","sendData","useState","blinded","setBlinded","charmed","setCharmed","deafened","setDeafened","exhaustion","setExhaustion","frightened","setFrightened","grappled","setGrappled","incapacitated","setIncapacitated","invisible","setInvisible","paralyzed","setParalyzed","poisoned","setPoisoned","petrified","setPetrified","prone","setProne","restrained","setRestrained","stunned","setStunned","unconscious","setUnconscious","conditionSet","conditionVar","useEffect","className","map","value","index","type","id","onClick","e","target","checked","defaultChecked","htmlFor","DamageTypes","slashing","setSlashing","piercing","setPiercing","bludgeoning","setBludgeoning","poison","setPoison","acid","setAcid","fire","setFire","cold","setCold","radiant","setRadiant","necrotic","setNecrotic","lightning","setLightning","thunder","setThunder","force","setForce","psychic","setPsychic","nonmagical","setDamage","Slashing","Piercing","Bludgeoning","Poison","Acid","Fire","Cold","Radiant","Necrotic","Lightning","Thunder","Force","Psychic","Nonmagical","onChange","name","aria-hidden","Saves","strSave","setStrSave","dexSave","setDexSave","conSave","setConSave","intSave","setIntSave","wisSave","setWisSave","chaSave","setChaSave","str","dex","con","int","wis","cha","setSave","aria-describedby","placeholder","Skills","acrobatics","setAcrobatics","animalHandling","setAnimalHandling","arcana","setArcana","athletics","setAthletics","deception","setDeception","history","setHistory","insight","setInsight","intimidation","setIntimidation","investigation","setInvestigation","medicine","setMedicine","nature","setNature","perception","setPerception","performance","setPerformance","persuasion","setPersuasion","religion","setReligion","sleightOfHand","setSlightOfHand","stealth","setStealth","survival","skillSet","Acrobatics","AnimalHandling","Arcana","Athletics","Deception","History","Insight","Intimidation","Investigation","Medicine","Nature","Perception","Performance","Persuasion","Religion","SlightOfHand","Stealth","Survival","Stats","state","setStr","setDex","setCon","setInt","setWis","setCha","scores","scoresArrayMap","defaultValue","parseInt","currentTarget","ChallengeRating","cr","setCr","Output","outputString","stateObject","commaAdd","length","xmlDocumentString","saveList","Object","entries","savingThrows","filter","skillList","skills","damageList","keys","size","alignment","ac","hp","speed","stats","some","k","saveName","updateSave","skillName","updateSkill","damageName","console","log","senses","passive","languages","traits","i","element","title","text","actions","legendaryActions","description","toXML","style","whiteSpace","CardCard","sendCardData","eleindex","remove","setTitle","setText","rows","CardSet","statevar","cards","setCards","modifyCard","data","newCards","cardDeleter","cardGroup","splice","OneCard","Form","require","render","props","SleightOfHand","conditionImmunities","Blinded","Charmed","Deafened","Exhaustion","Frightened","Grappled","Incapacitated","Invisible","Paralyzed","Petrified","Poisoned","Prone","Restrained","Stunned","Unconscious","environment","monsterString","baseState","handleChange","bind","getDataFrom","browserSave","reset","what","this","setState","event","ls","set","get","JSON","stringify","exportFunction","xml","Component","App","compendium","setCompendium","myCompendium","monster","source","xmlString","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","makeXML","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7fa43f36.chunk.js","sourcesContent":["import { Component, useState, useEffect} from \"react\";\nimport './conditions.css'\n// should be collapsable, with a number to show how many conditions are checked while it is collapsed. \nconst Conditions = ({sendData}) => {\n    const [blinded, setBlinded] = useState(false)\n    const [charmed, setCharmed] = useState(false)\n    const [deafened, setDeafened] = useState(false)\n    const [exhaustion, setExhaustion] = useState(false)\n    const [frightened, setFrightened] = useState(false)\n    const [grappled, setGrappled] = useState(false)\n    const [incapacitated, setIncapacitated] = useState(false)\n    const [invisible, setInvisible] = useState(false)\n    const [paralyzed, setParalyzed] = useState(false)\n    const [poisoned, setPoisoned] = useState(false)\n    const [petrified, setPetrified] = useState(false)\n    const [prone, setProne] = useState(false)\n    const [restrained, setRestrained] = useState(false)\n    const [stunned, setStunned] = useState(false)\n    const [unconscious, setUnconscious] = useState(false)\n\n    const callBackMethod=(value)=>{\n        sendData(\"conditionImmunities\", value);\n    }   \n    const conditionList = [\"Blinded\", \"Charmed\", \"Deafened\", \"Exhaustion\", \"Frightened\", \"Grappled\", \"Incapacitated\", \"Invisible\", \"Paralyzed\", \"Petrified\", \"Poisoned\", \"Prone\", \"Restrained\", \"Stunned\", \"Unconscious\",]\n    const conditionSet = [setBlinded, setCharmed, setDeafened, setExhaustion, setFrightened, setGrappled, setIncapacitated, setInvisible, setParalyzed, setPetrified, setPoisoned, setProne, setRestrained, setStunned, setUnconscious]\n    const conditionVar = [blinded, charmed, deafened, exhaustion, frightened, grappled, incapacitated, invisible, paralyzed, petrified, poisoned, prone, restrained, stunned, unconscious]\n    useEffect(() => {callBackMethod({blinded: blinded, charmed: charmed, deafened: deafened, exhaustion: exhaustion, frightened: frightened, grappled: grappled, incapacitated: incapacitated, invisible: invisible, paralyzed: paralyzed, poisoned: poisoned, petrified: petrified, prone: prone, restrained: restrained, stunned: stunned, unconscious: unconscious})\n    }, conditionVar)\n\n    return (\n        <div className=\"row button-box\">\n            {conditionList.map((value, index) => {\n                //creates radio buttons for each condition\n                return (\n                    <div className=\"custom-control custom-switch\" key={index}>\n                        <input type=\"checkbox\" className=\"custom-control-input\" id={value+\"Btn\"} onClick={(e) => conditionSet[index](e.target.checked)}  defaultChecked={conditionVar[index]}></input>\n                        <label className=\"custom-control-label\" htmlFor={value+\"Btn\"}>{value}</label>\n                    </div>\n                    // <div className=\"form-group-btn\" key={index}>\n                    //     <button type=\"button\" className=\"btn btn-toggle btn-secondary\" data-toggle={conditionVar[index]} name=\"\" id={value + \"Btn\"} value={conditionVar[index]} onClick={(e) => conditionSet[index](!e.target.value)}>\n                    //         {value}\n                    //     </button>\n                    // </div>\n                )\n            }\n            )}\n        </div>\n    )\n}\nexport default Conditions","//used to denote all available damage types, for immunity/vulnerability/resistance\n//should this be one section with 3 checkboxes for each type?  alternative takes up a lot of space.  \n//currently only one box per type\n\n//sending back array of 3 objects,\nimport React, { useState, useEffect } from 'react'\n\nconst DamageTypes = ({ sendData }) => {\n    const [slashing, setSlashing] = useState(\"none\")\n    const [piercing, setPiercing] = useState(\"none\")\n    const [bludgeoning, setBludgeoning] = useState(\"none\")\n    const [poison, setPoison] = useState(\"none\")\n    const [acid, setAcid] = useState(\"none\")\n    const [fire, setFire] = useState(\"none\")\n    const [cold, setCold] = useState(\"none\")\n    const [radiant, setRadiant] = useState(\"none\")\n    const [necrotic, setNecrotic] = useState(\"none\")\n    const [lightning, setLightning] = useState(\"none\")\n    const [thunder, setThunder] = useState(\"none\")\n    const [force, setForce] = useState(\"none\")\n    const [psychic, setPsychic] = useState(\"none\")\n    const [nonmagical, setNonmagical] = useState(\"none\")\n    const typeList = [\"Slashing\", \"Piercing\", \"Bludgeoning\", \"Poison\", \"Acid\", \"Fire\", \"Cold\", \"Radiant\", \"Necrotic\", \"Lightning\", \"Thunder\", \"Force\", \"Psychic\", \"Nonmagical\"];\n    const setDamage = [setSlashing, setPiercing, setBludgeoning, setPoison, setAcid, setFire, setCold, setRadiant, setNecrotic, setLightning, setThunder, setForce, setPsychic, setNonmagical];\n    const callBackMethod = (value) => {\n        sendData(\"DamageTypes\", value);\n    }\n    useEffect(() => {\n        callBackMethod({\n            Slashing: slashing,\n            Piercing: piercing,\n            Bludgeoning: bludgeoning,\n            Poison: poison,\n            Acid: acid,\n            Fire: fire,\n            Cold: cold,\n            Radiant: radiant,\n            Necrotic: necrotic,\n            Lightning: lightning,\n            Thunder: thunder,\n            Force: force,\n            Psychic: psychic,\n            Nonmagical: nonmagical,\n        })\n    }, [slashing, piercing, bludgeoning, poison, acid, fire, cold, radiant, necrotic, lightning, thunder, force, psychic, nonmagical])\n    return (\n        <div className=\"form-group row\">\n            {typeList.map((value, index) => {\n                return (\n                    <div className=\"form-check form-check-inline\" key={index} id={value+\"Radio\"} onChange={(e) => { setDamage[index](e.target.value) }}>\n                        <label className=\"form-check-label\" htmlFor={value + \"Box\"}>\n                            {value}\n                        </label>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio1\"} value=\"none\" defaultChecked></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\"><i className=\"fa fa-fist-raised\" aria-hidden=\"true\"></i></label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio2\"} value=\"resistant\"></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">R</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio3\"} value=\"immune\"></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">I</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio4\"} value=\"vulnerable\"></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio4\">V</label>\n                        </div>\n\n\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\nexport default DamageTypes","import React, { Component, useState, useEffect } from 'react';\n\nconst Saves = ({sendData}) => {\n  const saveThrows = [\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"]\n  const [strSave, setStrSave] = useState(\"\")\n  const [dexSave, setDexSave] = useState(\"\")\n  const [conSave, setConSave] = useState(\"\")\n  const [intSave, setIntSave] = useState(\"\")\n  const [wisSave, setWisSave] = useState(\"\")\n  const [chaSave, setChaSave] = useState(\"\")\n  const callBackMethod=(value)=>{\n    sendData(\"savingThrows\", value);\n  }   \n  useEffect(()=>{callBackMethod({str: strSave, dex:dexSave, con: conSave, int: intSave, wis: wisSave, cha: chaSave})},[strSave, dexSave, conSave, intSave, wisSave, chaSave])\n  const setSave = [setStrSave, setDexSave, setConSave, setIntSave, setWisSave, setChaSave];\n  return (\n    <div className=\"form-group row text-box-spaced\">\n      {saveThrows.map((value, index) => {\n        //no check boxes, empty box means no change from base stats\n        return (\n          <div className=\"form-check col-sm-4\" key={index}>\n            <label className=\"form-check-label\" htmlFor={value + \"Box\"}>\n              {value}\n            </label>\n            <div className=\"form-group\">\n              <label htmlFor={value + \"Mod\"}></label>\n              <input type=\"text\" className=\"form-control bg-dark text-light\" name=\"\" id={value + \"Mod\"} aria-describedby=\"helpId\" placeholder=\"+0\" onChange={e=>setSave[index](e.target.value)}/>\n              <small id=\"helpId\" className=\"form-text text-muted\">Mod value, ex. +4</small>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\nexport default Saves;","import React, {Component, useState, useEffect} from 'react';\nconst Skills =({sendData})=>{\n\n    const [acrobatics, setAcrobatics] = useState(\"\");\n    const [animalHandling, setAnimalHandling] = useState(\"\");\n    const [arcana, setArcana] = useState(\"\");\n    const [athletics, setAthletics] = useState(\"\");\n    const [deception, setDeception] = useState(\"\");\n    const [history, setHistory] = useState(\"\");\n    const [insight, setInsight] = useState(\"\");\n    const [intimidation, setIntimidation] = useState(\"\");\n    const [investigation, setInvestigation] = useState(\"\");\n    const [medicine, setMedicine] = useState(\"\");\n    const [nature, setNature] = useState(\"\");\n    const [perception, setPerception] = useState(\"\");\n    const [performance, setPerformance] = useState(\"\");\n    const [persuasion, setPersuasion] = useState(\"\");\n    const [religion, setReligion] = useState(\"\");\n    const [sleightOfHand, setSlightOfHand] = useState(\"\");\n    const [stealth, setStealth] = useState(\"\");\n    const [survival, setSurvival] = useState(\"\");\n\n    const skillList = [\"Acrobatics\", \"Animal Handling\", \"Arcana\", \"Athletics\", \"Deception\", \"History\", \"Insight\", \"Intimidation\", \"Investigation\", \"Medicine\", \"Nature\", \"Perception\", \"Performance\", \"Persuasion\", \"Religion\", \"Slight Of Hand\", \"Stealth\", \"Survival\"]\n    const skillSet = [setAcrobatics, setAnimalHandling, setArcana, setAthletics, setDeception, setHistory, setInsight, setIntimidation, setInvestigation, setMedicine, setNature, setPerception, setPerformance, setPersuasion, setReligion, setSlightOfHand, setStealth, setSurvival]\n    const callBackMethod=(value)=>{\n        sendData(\"skills\", value);\n    }   \n    useEffect(()=>{callBackMethod({Acrobatics: acrobatics, AnimalHandling: animalHandling, Arcana: arcana, Athletics: athletics, Deception: deception, History: history, Insight: insight, Intimidation: intimidation, Investigation: investigation, Medicine: medicine, Nature: nature, Perception: perception, Performance: performance, Persuasion: persuasion, Religion: religion, SlightOfHand: sleightOfHand, Stealth: stealth, Survival: survival})},[acrobatics, animalHandling, arcana, athletics, deception, history, insight, intimidation, investigation, medicine, nature, perception, performance, persuasion, religion, sleightOfHand, stealth, survival])\n    return(\n        <div>\n            {skillList.map((value,index)=>{\n                return(\n                    <div className=\"form-check-inline form-group\" key={index}>\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text bg-dark text-light\" htmlFor={value + \"Box\"}>\n                                    {value}\n                                </span>\n                                <input type=\"text\" className=\"form-control col-xs-1 bg-dark text-light\" name=\"\" id={value+\"Mod\"} aria-describedby=\"helpId\" placeholder=\"+0 (default)\" onChange={e=>skillSet[index](e.target.value)}/>\n                            </div>\n                        </div>\n                    // </div>\n                )\n            })}\n        </div>\n    )\n\n}\nexport default Skills","\nimport { useState, useEffect, Component } from 'react';\n\nconst Stats = ({ onChange, state, sendData }) => {\n    //should be able to send the object to parent needs to trigger when state is changed, so that the parent recieves value\n    const callBackMethod = (value) => {\n        sendData(\"stats\", value);\n    }\n\n    const [str, setStr] = useState(10);\n    const [dex, setDex] = useState(10);\n    const [con, setCon] = useState(10);\n    const [int, setInt] = useState(10);\n    const [wis, setWis] = useState(10);\n    const [cha, setCha] = useState(10);\n    const scores = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\n    useEffect(() => { callBackMethod({ str: str, dex: dex, con: con, int: int, wis: wis, cha: cha }) }, [str, dex, con, int, wis, cha])\n    // attempting to stop repeating self\n    const scoresArrayMap = () => {\n        return (\n            scores.map((value, index) => {\n                return <option key={index} value={value}>{value}</option>\n            }))\n    }\n    return (\n\n        <div className=\"form-group text-box-spaced\">\n            <h3>Stats</h3>\n            <div className=\"form-group row\">\n                <div className=\"col-sm-4\">\n                    \n                    <label htmlFor=\"strSelector\">Strength</label>\n                    <select id=\"strSelector\" defaultValue=\"10\" name=\"strStat\" onChange={e => setStr(parseInt(e.currentTarget.value))}>\n                        {scoresArrayMap()}\n                    </select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                    <label htmlFor=\"dexSelector\"> Dexterity</label>\n                    <select id=\"dexSelector\" defaultValue=\"10\" name=\"dexStat\" onChange={e => setDex(parseInt(e.currentTarget.value))}>\n                        {scoresArrayMap()}\n                    </select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                    <label htmlFor=\"conSelector\"> Constitution</label>\n                    <select id=\"conSelector\" defaultValue=\"10\" name=\"conStat\" onChange={e => setCon(parseInt(e.currentTarget.value))}>\n                        {scoresArrayMap()}\n                    </select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                \t<label htmlFor=\"intSelector\"> Intelligence</label>\n                \t<select id=\"intSelector\" defaultValue=\"10\" name=\"intStat\" onChange={e => setInt(parseInt(e.currentTarget.value))}>\n                \t    {scoresArrayMap()}\n                \t</select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                    <label htmlFor=\"wisSelector\"> Wisdom</label>\n                    <select id=\"wisSelector\" defaultValue=\"10\" name=\"wisStat\" onChange={e => setWis(parseInt(e.currentTarget.value))}>\n                        {scoresArrayMap()}\n                    </select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                    <label htmlFor=\"chaSelector\"> Charisma</label>\n                    <select id=\"chaSelector\" defaultValue=\"10\" name=\"chaStat\" onChange={e => setCha(parseInt(e.currentTarget.value))}>\n                        {scoresArrayMap()}\n                    </select>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Stats","import {useState, useEffect} from 'react'\nconst ChallengeRating = ({sendData})=>{\n    const [cr, setCr] = useState(\"\")\n    const crs = [\"0\", \"1/8\", \"1/4\", \"1/2\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"]\n    const callBackMethod=(value)=>{\n        sendData(\"cr\", value);\n    }   \n    useEffect(()=>{callBackMethod(cr)}, [cr])\n    return(\n        <div className=\"form-group text-box-spaced\">\n          <label htmlFor=\"crForm\">Challenge Rating</label>\n          <select className=\"form-control bg-dark text-light text-box-spaced\" name=\"\" id=\"crForm\" onChange={e=>{setCr(e.target.value)}}>\n            {crs.map((value, index)=>{\n                return <option key={index} value={value}>{value}</option>;\n            })}\n          </select>\n        </div>\n    )\n}\nexport default ChallengeRating;","//import problem for some reason it is not exported, currently putting in this file\n//import { toXML } from \"../devLogic/export.js\";\nimport './output.css'\nimport {useState, useEffect} from 'react';\n\n//whenever ANYthing changes, need to update the string in form state\nconst Output = ({ state, sendData}) => {\n    const toXML = (stateObject) => {\n        // used to add commas to all but final element.  \n        const commaAdd = (index, length) => {\n            if (index < length - 1) {\n                xmlDocumentString += ', ';\n            }\n        }\n        const updateSkill = (skillName, index, length) => {\n            if (stateObject.skills[skillName]) {\n                xmlDocumentString += skillName + \" \" + stateObject.skills[skillName]\n            } //plus possible comma? if its not the last element.\n            commaAdd(index, length)\n        }\n        const updateSave = (saveName, index, length) => {\n            if (stateObject.savingThrows[saveName]) {\n                xmlDocumentString += saveName + \" \" + stateObject.savingThrows[saveName]\n            }\n            commaAdd(index, length)\n        }\n        //filters out any keys without a truthy value \n        const saveList = Object.entries(stateObject.savingThrows)\n            .filter(([, val]) => val)\n            .map(([key]) => key);\n        const skillList = Object.entries(stateObject.skills)\n            .filter(([, val]) => val)\n            .map(([key]) => key);\n    \n        const damageList = Object.keys(stateObject.DamageTypes)\n    \n        let xmlDocumentString = \"\";\n        xmlDocumentString += \"\\t<monster>\\n\"\n        if (stateObject.name) {\n            xmlDocumentString += \"\\t\\t<name>\" + stateObject.name + \"</name>\\n\"\n        } /*else {\n            console.error(\"no name given\");\n        }*/\n        if (stateObject.size) {\n            xmlDocumentString += \"\\t\\t<size>\" + stateObject.size + \"</size>\\n\"\n        }\n        if (stateObject.type) {\n            xmlDocumentString += \"\\t\\t<type>\" + stateObject.type + \"</type>\\n\"\n        }\n        if (stateObject.alignment) {\n            xmlDocumentString += \"\\t\\t<alignment>\" + stateObject.alignment + \"</alignment>\\n\"\n        }\n        if (stateObject.ac) {\n            xmlDocumentString += \"\\t\\t<ac>\" + stateObject.ac + \"</ac>\\n\"\n        }\n        if (stateObject.hp) {\n            xmlDocumentString += \"\\t\\t<hp>\" + stateObject.hp + \"</hp>\\n\"\n        }\n        if (stateObject.speed) {\n            xmlDocumentString += \"\\t\\t<speed>\" + stateObject.speed + \"</speed>\\n\"\n        }\n        if (stateObject.stats.str) {\n            xmlDocumentString += \"\\t\\t<str>\" + stateObject.stats.str + \"</str>\\n\"\n        }\n        if (stateObject.stats.dex) {\n            xmlDocumentString += \"\\t\\t<dex>\" + stateObject.stats.dex + \"</dex>\\n\"\n        }\n        if (stateObject.stats.con) {\n            xmlDocumentString += \"\\t\\t<con>\" + stateObject.stats.con + \"</con>\\n\"\n        }\n        if (stateObject.stats.int) {\n            xmlDocumentString += \"\\t\\t<int>\" + stateObject.stats.int + \"</int>\\n\"\n        }\n        if (stateObject.stats.wis) {\n            xmlDocumentString += \"\\t\\t<wis>\" + stateObject.stats.wis + \"</wis>\\n\"\n        }\n        if (stateObject.stats.cha) {\n            xmlDocumentString += \"\\t\\t<cha>\" + stateObject.stats.cha + \"</cha>\\n\"\n        }\n    \n        //if there are any saves, open saves tag\n        if (Object.keys(stateObject.savingThrows).some(function (k) { return stateObject.savingThrows[k] })) {\n            xmlDocumentString += \"\\t\\t<saves>\"\n            //for each saving throw, if its there, print the abbreviated stat, a space (comma if neccesary), and the modifier, \n            saveList.map((value, index) => {\n                return updateSave(value, index, saveList.length)\n            })\n            //close saves tag\n            xmlDocumentString += \"</saves>\\n\"\n        }\n        //same with skills\n        if (Object.keys(stateObject.skills).some(function (k) { return stateObject.skills[k] })) {\n            xmlDocumentString += \"\\t\\t<skills>\"\n            skillList.map((value, index) => {\n                return updateSkill(value, index, skillList.length)\n            })\n            xmlDocumentString += \"</skills>\\n\"\n        }\n        if (Object.keys(stateObject.DamageTypes).some(function (k) { return stateObject.DamageTypes[k] == \"resist\" })) {\n            xmlDocumentString += \"\\t<resist>\"\n            damageList.map((damageName) => {\n                if (stateObject.DamageTypes[damageName] == \"resist\") {\n                    xmlDocumentString += damageName + \" \"\n                }\n            })\n            xmlDocumentString += \"</resist>\\n\"\n        }\n        if (Object.keys(stateObject.DamageTypes).some(function (k) { return stateObject.DamageTypes[k] == \"immune\" })) {\n            xmlDocumentString += \"\\t\\t<immune>\"\n            damageList.map((damageName) => {\n                console.log(damageName, \" checked for immune\")\n                if (stateObject.DamageTypes[damageName] == \"immune\") {\n                    xmlDocumentString += damageName + \" \"\n                }\n            })\n            xmlDocumentString += \"</immune>\\n\"\n        }\n        if (Object.keys(stateObject.DamageTypes).some(function (k) { return stateObject.DamageTypes[k] == \"vulnerable\" })) {\n            xmlDocumentString += \"\\t\\t<vulnerable>\";\n            let damageList = Object.keys(stateObject.DamageTypes)\n            damageList.map((damageName) => {\n                if (stateObject.DamageTypes[damageName] == \"vulnerable\") {\n                    xmlDocumentString += damageName + \" \"\n                }\n            })\n            xmlDocumentString += \"</vulnerable>\\n\"\n        }\n    \n        if (stateObject.senses) {\n            xmlDocumentString += \"\\t\\t<senses>\" + stateObject.senses + \"</senses>\\n\"\n        }\n        if (stateObject.passive) {\n            xmlDocumentString += \"\\t\\t<passive>\" + stateObject.passive + \"</passive>\\n\"\n        }\n        if (stateObject.languages) {\n            xmlDocumentString += \"\\t\\t<languages>\" + stateObject.languages + \"</languages>\\n\"\n        }\n        if (stateObject.cr) {\n            xmlDocumentString += \"\\t\\t<cr>\" + stateObject.cr + \"</cr>\\n\"\n        }\n        //traits actions and legendary?\n        if (stateObject.traits.length > 0) {\n            for (let i = 0; i < stateObject.traits.length; i++) {\n                const element = stateObject.traits[i];\n                xmlDocumentString += \"\\t\\t<trait>\\n\\t\\t\\t<name>\" + element.title + \"</name>\\n\\t\\t\\t<text>\" + element.text + \"</text>\\n\\t\\t</trait>\\n\"\n    \n            }\n        }\n        if (stateObject.actions.length > 0) {\n            for (let i = 0; i < stateObject.actions.length; i++) {\n                const element = stateObject.actions[i];\n                xmlDocumentString += \"\\t\\t<action>\\n\\t\\t\\t<name>\" + element.title + \"</name>\\n\\t\\t\\t<text>\" + element.text + \"</text>\\n\\t\\t</action>\\n\"\n    \n            }\n        }\n        if (stateObject.legendaryActions.length > 0) {\n            for (let i = 0; i < stateObject.legendaryActions.length; i++) {\n                const element = stateObject.legendaryActions[i];\n                xmlDocumentString += \"\\t\\t<legendary>\\n\\t\\t\\t<name>\" + element.title + \"</name>\\n\\t\\t\\t<text>\" + element.text + \"</text>\\n\\t\\t</legendary>\\n\"\n            }\n        }\n        if (stateObject.description){\n            xmlDocumentString += \"\\t\\t<description>\"+stateObject.description+\"</description>\\n\"\n        }\n        //finish xml by closing monster tag\n        xmlDocumentString += \"\\t</monster>\"\n        return xmlDocumentString;\n        //do stuff with it now!\n    }\n    const outputString = toXML(state);\n\n    \n    // const addMonster = (xmlString)=>{\n    //     //Adds current string to compendium\n    //     setMstring( xmlString);\n    //     //reset form somehow.  \n    // }\n    const callBackMethod = (value) => {\n        sendData(\"monsterString\", value);\n    }\n    useEffect(() => {\n        callBackMethod(outputString/*.replace(/[\\t\\n\\r]/gm,'')*/)\n    }, [outputString])\n\n\n    return (\n        <div className=\"jumbotron bg-dark text-light\">\n            <h1 className=\"display-3\">Output:</h1>\n            <p className=\"output-text\" style={{ whiteSpace: \"pre-wrap\" }}>{outputString}</p>\n            {/* <button type=\"button\" name=\"\" id=\"\" className=\"btn btn-primary btn-lg btn-block\" onClick={e=>addMonster(outputString)}>Save Monster to Compendium for export</button> */}\n            {/* <button type=\"button\" name=\"\" id=\"\" className=\"btn btn-primary btn-lg btn-block\" onClick={e=>makeCompendium(compendium)}>Create Compendium File</button> */}\n            \n        </div>\n\n    )\n}\nexport default Output;","\nimport { Component, useState, useEffect } from \"react\";\nconst CardCard = ({sendCardData, eleindex, remove, type}) => {\n    const [title, setTitle] = useState(\"\")\n    const [text, setText] = useState(\"\")\n\n    const callBackMethod=(value, index)=>{\n        //console.log('sending value: ', value)\n        sendCardData(value, index);\n    }\n    useEffect(()=>{ callBackMethod({title: title, text: text}, eleindex)}, [title, text])\n    return (\n        <div>\n            {/* remove buton for each card  */}\n            <div className=\"card text-white bg-dark mb-3 d-inline-block\">\n                <div className=\"card-header\"><input type=\"text\" className=\"form-control bg-dark text-light\" name=\"title\" id=\"cardTitle\" aria-describedby=\"helpId\" placeholder=\"\" onChange={(e)=>{setTitle(e.target.value)}}/></div>\n                <small id=\"helpId\" className=\"form-text text-muted\" >Name of {type}</small>\n                <div className=\"card-body\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"cardDescription\"></label>\n                        <textarea className=\"form-control bg-dark text-light\" name=\"description\" id=\"cardDescription\" placeholder={\"describe \"+ type +\" here\"} rows=\"3\" onChange={(e)=>{setText(e.target.value)}}></textarea>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-danger\" eleindex={eleindex} onClick={(e)=>{remove(e.target.eleindex)}}>Remove {type}</button>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default CardCard","//THIS IS CURRENTLY COPIED FROM CARD, NEEDS TO BE GENERIC\nimport {Component, useState, useEffect} from 'react';\nimport OneCard from '../components/OneCard'\nconst CardSet=({sendData, type,statevar})=> {\n    const [cards, setCards] = useState([{}])\n    const addNewCard = (data)=>{\n        setCards([...cards, data])\n    }\n    // problem: there are 2 ways to edit state, one that adds a \"blank\" card card, and another that updates the content of that state based on the changes in the card, or removes the card if the remove button was (clicked and confirmed?).  \n    const modifyCard = (data, index)=>{\n        let newCards = [...cards]\n        newCards[index] = data\n        setCards([...newCards])//TODO\n    }\n    const cardDeleter=(index)=>{\n        let cardGroup = [...cards]\n        cardGroup.splice(index,1);\n        setCards(cardGroup);\n        }\n    const callBackMethod=(value)=>{\n        sendData(statevar, value);\n    }\n    useEffect(()=>{callBackMethod(cards)}, [cards])\n\n    return(\n        <div>\n            <button type=\"button\" className=\"btn btn-success\" onClick={(e)=>{addNewCard({title: \"\", text: \"\"})}}>Add {type}</button>\n             <div className=\"card-deck\">\n                \n                {cards.map((value, index)=>{\n                    return (\n                        <OneCard type={type} key={index} sendCardData={modifyCard} eleindex={index} value={value} remove={cardDeleter}></OneCard>\n                        )\n                    })}\n                </div>\n        </div>\n    )\n}\nexport default CardSet;","import Conditions from '../components/Conditions';\nimport DamageTypes from '../components/DamageTypes';\nimport Saves from '../components/Saves';\nimport Skills from '../components/Skills';\nimport Stats from '../components/stats';\nimport ChallengeRating from '../components/ChallengeRating';\nimport Output from './output';\nimport './form.css'\nimport ls from 'local-storage';\nimport CardSet from './Cardset'\nconst { render } = require(\"@testing-library/react\")\nconst { Component } = require(\"react\")\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            type: '',\n            stats: {\n                str: 10,\n                dex: 10,\n                con: 10,\n                int: 10,\n                wis: 10,\n                cha: 10,\n            },\n            hp: '',\n            ac: '',\n            languages: '',\n            size: '',\n            alignment: '',\n            speed: '',\n            cr: '',\n            senses: '',\n            passive: '',\n            savingThrows: {\n                str: '',\n                dex: '',\n                con: '',\n                int: '',\n                wis: '',\n                cha: '',\n            },\n            skills: {\n                Athletics: '',\n                Acrobatics: '',\n                SleightOfHand: '',\n                Stealth: '',\n                Arcana: '',\n                History: '',\n                Investigation: '',\n                Nature: '',\n                Religion: '',\n                AnimalHandling: '',\n                Insight: '',\n                Medicine: '',\n                Perception: '',\n                Survival: '',\n                Deception: '',\n                Intimidation: '',\n                Performance: '',\n                Persuasion: '',\n            },\n            DamageTypes: {\n                Slashing: \"none\",\n                Piercing: \"none\",\n                Bludgeoning: \"none\",\n                Poison: \"none\",\n                Acid: \"none\",\n                Fire: \"none\",\n                Cold: \"none\",\n                Radiant: \"none\",\n                Necrotic: \"none\",\n                Lightning: \"none\",\n                Thunder: \"none\",\n                Force: \"none\",\n                Psychic: \"none\",\n                Nonmagical: \"none\",\n            },\n            conditionImmunities: {\n                Blinded: false,\n                Charmed: false,\n                Deafened: false,\n                Exhaustion: false,\n                Frightened: false,\n                Grappled: false,\n                Incapacitated: false,\n                Invisible: false,\n                Paralyzed: false,\n                Petrified: false,\n                Poisoned: false,\n                Prone: false,\n                Restrained: false,\n                Stunned: false,\n                Unconscious: false,\n\n            },\n            traits: [],\n            actions: [],\n            legendaryActions: [],\n            description: \"\",\n            environment: \"\",\n            monsterString: \"\",\n\n        }\n        //used for resetting the form\n        this.baseState = this.state\n        this.handleChange = this.handleChange.bind(this);\n        this.render = this.render.bind(this);\n        this.getDataFrom = this.getDataFrom.bind(this);\n        this.browserSave = this.browserSave.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    //gets data sent from stats via prop, assigns to state.stats\n    getDataFrom(what, data) {\n        \n        this.setState({[what]: data})\n    }\n    //processes elements directly on this component/container\n    handleChange(event) {\n        const target = event.target\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({ [name]: value });\n    }\n    //called when button is pressed\n    browserSave() {\n        console.log('saved to browser')\n        ls.set('state', this.state)\n    }\n\n    //when component is about to mount, load state from user's localstorage (if there is one )\n    componentDidMount() {\n\n        if (ls.get('state') == false) {\n            ls.set('state', JSON.stringify(this.state));\n        }\n        else {\n            this.setState(ls.get('state'));\n        }\n    }\n    // as component unmounts, set local storage, currently not working\n    reset() {\n        this.setState(this.baseState);\n    }\n    \n\n    render() {\n        return (\n            <form>\n                <button type=\"button\" name=\"\" id=\"\" onClick={this.browserSave} className=\"btn btn-primary btn-lg btn-block\">Save Current Monster to LocalStorage</button>\n                <p className=\"text-muted\">Use this button to save the current form and come back later.  This does not save the monster to the compendium as a whole, please see the bottom of the page for that.</p>\n                <button type=\"button\" name=\"\" id=\"\" onClick={this.reset} className=\"btn btn-danger btn-lg btn-block\">Reset entire form</button>\n                <p className=\"text-muted\">Resets the inputs on the form, will not affect compendium or saved storage.</p>\n\n                <div className=\"form-group row text-box-spaced\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"nameInput\">Name</label>\n                        <input type=\"text\" id=\"nameInput\" placeholder=\"creature name\" name=\"name\" value={this.state.name} onChange={this.handleChange} className=\"form-control bg-dark  text-light\" />\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"typeInput\">Type</label>\n                        <input type=\"text\" id=\"typeInput\" placeholder=\"Humanoid, monstrosity, etc\" name=\"type\" value={this.state.type} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"sizeInput\">Size</label>\n                        <input type=\"text\" id=\"sizeInput\" placeholder=\"Small, Medium, Large, Huge\" name=\"size\" value={this.state.size} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <div className=\"form-group row text-box-spaced\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"alignmentInput\">Alignment</label>\n                        <input type=\"text\" id=\"alignmentInput\" placeholder=\"Lawful good, neutral evil, ect.\" name=\"alignment\" value={this.state.alignment} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"hpInput\">hp</label>\n                        <input type=\"text\" id=\"hpInput\" placeholder=\"optional: can be done automatically from stats\" name=\"hp\" value={this.state.hp} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"armorInput\">AC</label>\n                        <input type=\"text\" id=\"armorInput\" placeholder=\"12, light armor\" name=\"ac\" value={this.state.ac} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <div className=\"form-group row text-box-spaced\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"speedInput\">Speed</label>\n                        <input type=\"text\" id=\"speedInput\" placeholder=\" walk 30 ft., fly 50 ft. \" name=\"speed\" value={this.state.speed} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"nameInput\">Languages</label>\n                        <input type=\"text\" id=\"nameInput\" placeholder=\"Common, Elvish, Abyssal.\" name=\"languages\" value={this.state.languages} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"senseInput\"> Senses </label>\n                        <input type=\"text\" id=\"senseInput\" placeholder=\"Darkvision 60 ft.\" name=\"senses\" value={this.state.senses} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <ChallengeRating value={this.state.stats} sendData={this.getDataFrom}></ChallengeRating>\n                <hr></hr>\n                <Stats value={this.state.stats} sendData={this.getDataFrom}></Stats>\n                <div>\n                    <h3>\n                        Saving Throws\n                    </h3>\n                    <Saves onChange={this.handleChange} sendData={this.getDataFrom}></Saves>\n                </div>\n                <div>\n                    <h3>\n                        Skills\n                    </h3>\n                    <Skills sendData={this.getDataFrom}></Skills>\n                </div>\n                <div>\n                    <hr></hr>\n                    <h3>Damage types</h3>\n                    <label>\n                        <i className=\"fa fa-fist-raised\" aria-hidden=\"true\"></i>= normal, R= Resistance, I= immunity, V=Vulnerability\n                    </label>\n                    <DamageTypes sendData={this.getDataFrom}></DamageTypes>\n                </div>\n                <div>\n                    <h3>\n                        Condition Immunities\n                    </h3>\n                    <Conditions onChange={this.handleChange} sendData={this.getDataFrom}></Conditions>\n                </div>\n                <h3>Traits</h3>\n                <CardSet key=\"trait\" type=\"trait\" statevar=\"traits\" sendData={this.getDataFrom}></CardSet>\n                {/* <Traits onChange={this.handleChange} sendData={this.getDataFrom}></Traits> */}\n                <h3>Actions</h3>\n                <CardSet key=\"action\" type=\"action\" statevar=\"actions\" sendData={this.getDataFrom}></CardSet>\n\n                {/* <Actions onChange={this.handleChange} sendData={this.getDataFrom}></Actions> */}\n                <h3>Legendary Actions</h3>\n                <CardSet key=\"LegAction\" type=\"legendary action\" statevar=\"legendaryActions\" sendData={this.getDataFrom}></CardSet>\n\n                {/* <LegActions onChange={this.handleChange} sendData={this.getDataFrom}></LegActions> */}\n                {/* <div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\"></label>\n                        <textarea className=\"form-control\" name=\"description\" id=\"description\" rows=\"3\" placeholder=\"relevant description here\" ></textarea>\n                        {onChange={this.handleChange} value={this.state.description}}\n                    </div>\n                </div> */}\n                <div className=\"form-group text-box-spaced\">\n                    <label htmlFor=\"environmentInput\"> Environment </label>\n                    <input type=\"text\" id=\"senseInput\" placeholder=\"Mountain, hills, etc.\" name=\"environment\" value={this.state.environment} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                </div>\n                <div className=\"form-group text-box-spaced\">\n                    <label htmlFor=\"descriptionInput\">Description</label>\n                    <textarea className=\"form-control bg-dark text-light\" type=\"text\" id=\"descriptionInput\" name=\"description\" onChange={this.handleChange} placeholder=\"Flavor text and/or description for your monster.\"></textarea>\n\n                </div>\n                <Output state={this.state} sendData={this.getDataFrom}></Output>\n                <button type=\"button\" name=\"\" id=\"\" className=\"btn btn-primary btn-lg btn-block\" onClick={(e)=>{this.props.exportFunction({name: this.state.name, xml:this.state.monsterString})}}>Save to compendium</button>\n                <p className=\"text-muted\">Puts current monster in compendium for later export.  (Don't forget to save your compendium!)</p>\n\n            </form>\n        )\n    }\n}\nexport default Form;","import Form from './containers/form'\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport ls from 'local-storage';\n\n\nfunction App() {\n  const [compendium, setCompendium] = useState([])\n  const recieveCompendium = (myCompendium) => {\n    if (compendium === []) {\n      setCompendium(myCompendium)\n    } else {\n      setCompendium([...(compendium || []), myCompendium])\n    }\n  }\n  const browserSaveComp = () => {\n    console.log('saved to browser')\n    ls.set('compendium', compendium)\n  }\n  useEffect(() => {\n    if (ls.get('compendium') == false) {\n      console.log(\"cant find file!\")\n      ls.set('compendium', compendium)\n\n    } else {\n      console.log(\"We found a compendium file, attempting to load\")\n      setCompendium(ls.get('compendium'));\n    }\n  }, [])\n  const makeXML = (source) => {\n    let xmlString = \"<compendium>\\n\"\n    for (let i = 0; i < source.length; i++) {\n      xmlString += source[i].xml;\n    }\n    xmlString += \"\\n</compendium>\"\n    const element = document.createElement(\"a\");\n    const file = new Blob([xmlString], { type: 'text/xml' });\n    element.href = URL.createObjectURL(file);\n    element.download = \"myCompendium.xml\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>XML Monster Muncher</h1>\n      </header>\n      <Form exportFunction={recieveCompendium}></Form>\n      <div className=\"row\" id=\"monsterlist\">\n        <ul>\n          <h3>Saved monsters:</h3>\n          {(compendium ? compendium : []).map((monster, index) => {\n            return (\n              <li key={index}>{monster.name}</li>)\n          })}\n        </ul>\n      </div>\n      <button type=\"button\" className=\"btn btn-primary\" onClick={browserSaveComp}>Save compendium to localstorage</button>\n      <p className=\"text-muted\">Saves your compendium to browser's localstorage, allowing you to add to it later</p>\n      <button type=\"button\" className=\"btn btn-primary\" onClick={() => { makeXML(compendium) }}>Create XML file</button>\n      <p className=\"text-muted\">Creates an XML file, and allows the user to download the entire compendium with all monsters listed above</p>\n      <div className=\"Row\">\n\n\n        {/* <a name=\"\" id=\"\" className=\"btn btn-primary\" href=\"#\" role=\"button\">Create XML compendium</a> */}\n      </div>\n      <div>\n        <p className=\"form-text text-muted\">\n          Fill in what is needed for your monster, then copy paste into a txt file ending in .xml with a surrounding tag of compendium.  Currently, you can save to your browser's localstorage with the button on the top.  At the bottom there is a button to add the monster to your \"Compendium\" (also saved to local storage).  Then import into your favorite combat tracker.  Currently optimized for game master 5.\n        </p>\n      </div>\n      <footer>\n        <a href=\"https://github.com/sbrevolution5/xml-monster-muncher\">Contribute on Github <i className=\"fa fa-github\" aria-hidden=\"true\"></i></a>\n        <p><i className=\"fa fa-copyright\" aria-hidden=\"true\"></i> Seth A. Burleson 2021</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}