{"version":3,"sources":["logo.svg","components/Conditions.js","components/DamageTypes.js","components/Saves.js","components/Skills.js","components/stats.js","components/TraitCard.js","containers/Traits.js","components/ActionCard.js","containers/Actions.js","components/ChallengeRating.js","containers/output.js","containers/form.js","App.js","reportWebVitals.js","index.js"],"names":["Conditions","sendData","useState","blinded","setBlinded","charmed","setCharmed","deafened","setDeafened","exhaustion","setExhaustion","frightened","setFrightened","grappled","setGrappled","incapacitated","setIncapacitated","invisible","setInvisible","paralyzed","setParalyzed","poisoned","setPoisoned","petrified","setPetrified","prone","setProne","restrained","setRestrained","stunned","setStunned","unconscious","setUnconscious","conditionSet","conditionVar","useEffect","className","map","value","index","type","id","onClick","e","target","checked","defaultChecked","htmlFor","DamageTypes","slashing","setSlashing","piercing","setPiercing","bludgeoning","setBludgeoning","poison","setPoison","acid","setAcid","fire","setFire","cold","setCold","radiant","setRadiant","necrotic","setNecrotic","lightning","setLightning","thunder","setThunder","force","setForce","psychic","setPsychic","nonmagical","setDamage","Slashing","Piercing","Bludgeoning","Poison","Acid","Fire","Cold","Radiant","Necrotic","Lightning","Thunder","Force","Psychic","Nonmagical","onChange","name","aria-hidden","Saves","strSave","setStrSave","dexSave","setDexSave","conSave","setConSave","intSave","setIntSave","wisSave","setWisSave","chaSave","setChaSave","str","dex","con","int","wis","cha","setSave","aria-describedby","placeholder","Skills","acrobatics","setAcrobatics","animalHandling","setAnimalHandling","arcana","setArcana","athletics","setAthletics","deception","setDeception","history","setHistory","insight","setInsight","intimidation","setIntimidation","investigation","setInvestigation","medicine","setMedicine","nature","setNature","perception","setPerception","performance","setPerformance","persuasion","setPersuasion","religion","setReligion","sleightOfHand","setSlightOfHand","stealth","setStealth","survival","skillSet","Acrobatics","AnimalHandling","Arcana","Athletics","Deception","History","Insight","Intimidation","Investigation","Medicine","Nature","Perception","Performance","Persuasion","Religion","SlightOfHand","Stealth","Survival","Stats","state","setStr","setDex","setCon","setInt","setWis","setCha","scores","scoresArrayMap","defaultValue","parseInt","currentTarget","TraitCard","sendTraitData","eleindex","remove","title","setTitle","text","setText","console","log","rows","Traits","traits","setTraits","modifyTrait","data","newTraits","cardDeleter","traitGroup","splice","ActionCard","sendActionData","Actions","actions","setActions","modifyAction","newActions","actionGroup","ChallengeRating","cr","setCr","toXML","stateObject","skillList","Object","keys","skills","damageList","xmlDocumentString","size","alignment","ac","hp","speed","stats","savingThrows","some","k","skillName","damageName","senses","passive","languages","length","i","element","Output","outputString","style","whiteSpace","Form","require","render","props","SleightOfHand","conditionImmunities","Blinded","Charmed","Deafened","Exhaustion","Frightened","Grappled","Incapacitated","Invisible","Paralyzed","Petrified","Poisoned","Prone","Restrained","Stunned","Unconscious","legendaryActions","description","environment","handleChange","bind","getDataFromStats","getDataFromSaves","getDataFromSkills","getDataFromDamageTypes","getDataFromChallengeRating","getDataFromActions","getDataFromConditions","getDataFromTraits","this","setState","event","Component","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4NAAe,I,kECiDAA,EA9CI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACDC,oBAAS,GADR,mBACxBC,EADwB,KACfC,EADe,OAEDF,oBAAS,GAFR,mBAExBG,EAFwB,KAEfC,EAFe,OAGCJ,oBAAS,GAHV,mBAGxBK,EAHwB,KAGdC,EAHc,OAIKN,oBAAS,GAJd,mBAIxBO,EAJwB,KAIZC,EAJY,OAKKR,oBAAS,GALd,mBAKxBS,EALwB,KAKZC,EALY,OAMCV,oBAAS,GANV,mBAMxBW,EANwB,KAMdC,EANc,OAOWZ,oBAAS,GAPpB,mBAOxBa,EAPwB,KAOTC,EAPS,OAQGd,oBAAS,GARZ,mBAQxBe,EARwB,KAQbC,EARa,OASGhB,oBAAS,GATZ,mBASxBiB,EATwB,KASbC,EATa,OAUClB,oBAAS,GAVV,mBAUxBmB,EAVwB,KAUdC,EAVc,OAWGpB,oBAAS,GAXZ,mBAWxBqB,EAXwB,KAWbC,EAXa,OAYLtB,oBAAS,GAZJ,mBAYxBuB,EAZwB,KAYjBC,EAZiB,OAaKxB,oBAAS,GAbd,oBAaxByB,GAbwB,MAaZC,GAbY,SAcD1B,oBAAS,GAdR,qBAcxB2B,GAdwB,MAcfC,GAde,SAeO5B,oBAAS,GAfhB,qBAexB6B,GAfwB,MAeXC,GAfW,MAqBzBC,GAAe,CAAC7B,EAAYE,EAAYE,EAAaE,EAAeE,EAAeE,EAAaE,EAAkBE,EAAcE,EAAcI,EAAcF,EAAaI,EAAUE,GAAeE,GAAYE,IAC9ME,GAAe,CAAC/B,EAASE,EAASE,EAAUE,EAAYE,EAAYE,EAAUE,EAAeE,EAAWE,EAAWI,EAAWF,EAAUI,EAAOE,GAAYE,GAASE,IAI1K,OAHAI,qBAAU,WALNlC,EAK4B,CAACE,QAASA,EAASE,QAASA,EAASE,SAAUA,EAAUE,WAAYA,EAAYE,WAAYA,EAAYE,SAAUA,EAAUE,cAAeA,EAAeE,UAAWA,EAAWE,UAAWA,EAAWE,SAAUA,EAAUE,UAAWA,EAAWE,MAAOA,EAAOE,WAAYA,GAAYE,QAASA,GAASE,YAAaA,OACnVG,IAGC,qBAAKE,UAAU,MAAf,SAPkB,CAAC,UAAW,UAAW,WAAY,aAAc,aAAc,WAAY,gBAAiB,YAAa,YAAa,YAAa,WAAY,QAAS,aAAc,UAAW,eAQhLC,KAAI,SAACC,EAAOC,GAEvB,OACI,sBAAKH,UAAU,+BAAf,UACI,uBAAOI,KAAK,WAAWJ,UAAU,uBAAuBK,GAAIH,EAAM,MAAOI,QAAS,SAACC,GAAD,OAAOV,GAAaM,GAAOI,EAAEC,OAAOC,UAAWC,eAAgBZ,GAAaK,KAC9J,uBAAOH,UAAU,uBAAuBW,QAAST,EAAM,MAAvD,SAA+DA,MAFhBC,SC2CxDS,EAtEK,SAAC,GAAkB,IAAhB/C,EAAe,EAAfA,SAAe,EACFC,mBAAS,QADP,mBAC3B+C,EAD2B,KACjBC,EADiB,OAEFhD,mBAAS,QAFP,mBAE3BiD,EAF2B,KAEjBC,EAFiB,OAGIlD,mBAAS,QAHb,mBAG3BmD,EAH2B,KAGdC,EAHc,OAINpD,mBAAS,QAJH,mBAI3BqD,EAJ2B,KAInBC,EAJmB,OAKVtD,mBAAS,QALC,mBAK3BuD,EAL2B,KAKrBC,EALqB,OAMVxD,mBAAS,QANC,mBAM3ByD,EAN2B,KAMrBC,EANqB,OAOV1D,mBAAS,QAPC,mBAO3B2D,EAP2B,KAOrBC,EAPqB,OAQJ5D,mBAAS,QARL,mBAQ3B6D,EAR2B,KAQlBC,EARkB,OASF9D,mBAAS,QATP,mBAS3B+D,EAT2B,KASjBC,EATiB,OAUAhE,mBAAS,QAVT,mBAU3BiE,EAV2B,KAUhBC,EAVgB,OAWJlE,mBAAS,QAXL,mBAW3BmE,EAX2B,KAWlBC,EAXkB,OAYRpE,mBAAS,QAZD,mBAY3BqE,EAZ2B,KAYpBC,EAZoB,OAaJtE,mBAAS,QAbL,oBAa3BuE,GAb2B,MAalBC,GAbkB,SAcExE,mBAAS,QAdX,qBAc3ByE,GAd2B,MAgB5BC,GAAY,CAAC1B,EAAaE,EAAaE,EAAgBE,EAAWE,EAASE,EAASE,EAASE,EAAYE,EAAaE,EAAcE,EAAYE,EAAUE,GAhB9H,OAsClC,OAlBAvC,qBAAU,WAFNlC,EAGe,CACX4E,SAAU5B,EACV6B,SAAU3B,EACV4B,YAAa1B,EACb2B,OAAQzB,EACR0B,KAAMxB,EACNyB,KAAMvB,EACNwB,KAAMtB,EACNuB,QAASrB,EACTsB,SAAUpB,EACVqB,UAAWnB,EACXoB,QAASlB,EACTmB,MAAOjB,EACPkB,QAAShB,GACTiB,WAAYf,OAEjB,CAAC1B,EAAUE,EAAUE,EAAaE,EAAQE,EAAME,EAAME,EAAME,EAASE,EAAUE,EAAWE,EAASE,EAAOE,GAASE,KAElH,qBAAKvC,UAAU,iBAAf,SAxBa,CAAC,WAAY,WAAY,cAAe,SAAU,OAAQ,OAAQ,OAAQ,UAAW,WAAY,YAAa,UAAW,QAAS,UAAW,cAyB5IC,KAAI,SAACC,EAAOC,GAClB,OACI,sBAAKH,UAAU,+BAA2CK,GAAIH,EAAM,QAASqD,SAAU,SAAChD,GAAQiC,GAAUrC,GAAOI,EAAEC,OAAON,QAA1H,UACI,uBAAOF,UAAU,mBAAmBW,QAAST,EAAQ,MAArD,SACKA,IAEL,sBAAKF,UAAU,+BAAf,UACI,uBAAOA,UAAU,mBAAmBI,KAAK,QAAQoD,KAAM,qBAAqBtD,EAAOG,GAAIH,EAAQ,eAAgBA,MAAM,OAAOQ,gBAAc,IAC1I,uBAAOV,UAAU,mBAAmBW,QAAQ,eAA5C,SAA2D,mBAAGX,UAAU,oBAAoByD,cAAY,cAE5G,sBAAKzD,UAAU,+BAAf,UACI,uBAAOA,UAAU,mBAAmBI,KAAK,QAAQoD,KAAM,qBAAqBtD,EAAOG,GAAIH,EAAQ,eAAgBA,MAAM,cACrH,uBAAOF,UAAU,mBAAmBW,QAAQ,eAA5C,kBAEJ,sBAAKX,UAAU,+BAAf,UACI,uBAAOA,UAAU,mBAAmBI,KAAK,QAAQoD,KAAM,qBAAqBtD,EAAOG,GAAIH,EAAQ,eAAgBA,MAAM,WACrH,uBAAOF,UAAU,mBAAmBW,QAAQ,eAA5C,kBAEJ,sBAAKX,UAAU,+BAAf,UACI,uBAAOA,UAAU,mBAAmBI,KAAK,QAAQoD,KAAM,qBAAqBtD,EAAOG,GAAIH,EAAQ,eAAgBA,MAAM,eACrH,uBAAOF,UAAU,mBAAmBW,QAAQ,eAA5C,oBAlB2CR,SCdxDuD,EAjCD,SAAC,GAAgB,IAAf7F,EAAc,EAAdA,SAAc,EAEEC,mBAAS,IAFX,mBAErB6F,EAFqB,KAEZC,EAFY,OAGE9F,mBAAS,IAHX,mBAGrB+F,EAHqB,KAGZC,EAHY,OAIEhG,mBAAS,IAJX,mBAIrBiG,EAJqB,KAIZC,EAJY,OAKElG,mBAAS,IALX,mBAKrBmG,EALqB,KAKZC,EALY,OAMEpG,mBAAS,IANX,mBAMrBqG,EANqB,KAMZC,EANY,OAOEtG,mBAAS,IAPX,mBAOrBuG,EAPqB,KAOZC,EAPY,KAW5BvE,qBAAU,WAFRlC,EAE4B,CAAC0G,IAAKZ,EAASa,IAAIX,EAASY,IAAKV,EAASW,IAAKT,EAASU,IAAKR,EAASS,IAAKP,MAAW,CAACV,EAASE,EAASE,EAASE,EAASE,EAASE,IAClK,IAAMQ,EAAU,CAACjB,EAAYE,EAAYE,EAAYE,EAAYE,EAAYE,GAC7E,OACE,qBAAKtE,UAAU,iBAAf,SAbiB,CAAC,WAAY,YAAa,eAAgB,eAAgB,SAAU,YAcvEC,KAAI,SAACC,EAAOC,GAEtB,OACE,sBAAKH,UAAU,aAAf,UACE,uBAAOA,UAAU,mBAAmBW,QAAST,EAAQ,MAArD,SACGA,IAEH,sBAAKF,UAAU,aAAf,UACE,uBAAOW,QAAST,EAAQ,QACxB,uBAAOE,KAAK,OAAOJ,UAAU,kCAAkCwD,KAAK,GAAGnD,GAAIH,EAAQ,MAAO4E,mBAAiB,SAASC,YAAY,KAAKxB,SAAU,SAAAhD,GAAC,OAAEsE,EAAQ1E,GAAOI,EAAEC,OAAON,UAC1K,uBAAOG,GAAG,SAASL,UAAU,uBAA7B,oCAP6BG,SC2B5B6E,EA9CD,SAAC,GAAc,IAAbnH,EAAY,EAAZA,SAAY,EAEYC,mBAAS,IAFrB,mBAEjBmH,EAFiB,KAELC,EAFK,OAGoBpH,mBAAS,IAH7B,mBAGjBqH,EAHiB,KAGDC,EAHC,OAIItH,mBAAS,IAJb,mBAIjBuH,EAJiB,KAITC,EAJS,OAKUxH,mBAAS,IALnB,mBAKjByH,EALiB,KAKNC,EALM,OAMU1H,mBAAS,IANnB,mBAMjB2H,EANiB,KAMNC,EANM,OAOM5H,mBAAS,IAPf,mBAOjB6H,EAPiB,KAORC,EAPQ,OAQM9H,mBAAS,IARf,mBAQjB+H,EARiB,KAQRC,EARQ,OASgBhI,mBAAS,IATzB,mBASjBiI,EATiB,KASHC,EATG,OAUkBlI,mBAAS,IAV3B,mBAUjBmI,EAViB,KAUFC,EAVE,OAWQpI,mBAAS,IAXjB,mBAWjBqI,EAXiB,KAWPC,EAXO,OAYItI,mBAAS,IAZb,mBAYjBuI,EAZiB,KAYTC,EAZS,OAaYxI,mBAAS,IAbrB,mBAajByI,EAbiB,KAaLC,EAbK,OAcc1I,mBAAS,IAdvB,oBAcjB2I,GAdiB,MAcJC,GAdI,SAeY5I,mBAAS,IAfrB,qBAejB6I,GAfiB,MAeLC,GAfK,SAgBQ9I,mBAAS,IAhBjB,qBAgBjB+I,GAhBiB,MAgBPC,GAhBO,SAiBiBhJ,mBAAS,IAjB1B,qBAiBjBiJ,GAjBiB,MAiBFC,GAjBE,SAkBMlJ,mBAAS,IAlBf,qBAkBjBmJ,GAlBiB,MAkBRC,GAlBQ,SAmBQpJ,mBAAS,IAnBjB,qBAmBjBqJ,GAnBiB,MAsBlBC,GAAW,CAAClC,EAAeE,EAAmBE,EAAWE,EAAcE,EAAcE,EAAYE,EAAYE,EAAiBE,EAAkBE,EAAaE,EAAWE,EAAeE,GAAgBE,GAAeE,GAAaE,GAAiBE,GAtBlO,OA2BxB,OADAnH,qBAAU,WAFNlC,EAE0B,CAACwJ,WAAYpC,EAAYqC,eAAgBnC,EAAgBoC,OAAQlC,EAAQmC,UAAWjC,EAAWkC,UAAWhC,EAAWiC,QAAS/B,EAASgC,QAAS9B,EAAS+B,aAAc7B,EAAc8B,cAAe5B,EAAe6B,SAAU3B,EAAU4B,OAAQ1B,EAAQ2B,WAAYzB,EAAY0B,YAAaxB,GAAayB,WAAYvB,GAAYwB,SAAUtB,GAAUuB,aAAcrB,GAAesB,QAASpB,GAASqB,SAAUnB,OAAY,CAAClC,EAAYE,EAAgBE,EAAQE,EAAWE,EAAWE,EAASE,EAASE,EAAcE,EAAeE,EAAUE,EAAQE,EAAYE,GAAaE,GAAYE,GAAUE,GAAeE,GAASE,KAEvnB,8BAPc,CAAC,aAAc,iBAAkB,SAAU,YAAa,YAAa,UAAW,UAAW,eAAgB,gBAAiB,WAAY,SAAU,aAAc,cAAe,aAAc,WAAY,eAAgB,UAAW,YAQnOlH,KAAI,SAACC,EAAMC,GAClB,OACI,qBAAKH,UAAU,+BAAf,SACQ,sBAAKA,UAAU,sBAAf,UACI,sBAAMA,UAAU,sCAAsCW,QAAST,EAAQ,MAAvE,SACKA,IAEL,uBAAOE,KAAK,OAAOJ,UAAU,2CAA2CwD,KAAK,GAAGnD,GAAIH,EAAM,MAAO4E,mBAAiB,SAASC,YAAY,eAAexB,SAAU,SAAAhD,GAAC,OAAE6G,GAASjH,GAAOI,EAAEC,OAAON,cALrJC,SC2BxDoI,EAxDF,SAAC,GAA8B,EAA7BhF,SAA6B,EAAnBiF,MAAoB,IAAb3K,EAAY,EAAZA,SAAY,EAMlBC,mBAAS,IANS,mBAMjCyG,EANiC,KAM5BkE,EAN4B,OAOlB3K,mBAAS,IAPS,mBAOjC0G,EAPiC,KAO5BkE,EAP4B,OAQlB5K,mBAAS,IARS,mBAQjC2G,EARiC,KAQ5BkE,EAR4B,OASlB7K,mBAAS,IATS,mBASjC4G,EATiC,KAS5BkE,EAT4B,OAUlB9K,mBAAS,IAVS,mBAUjC6G,EAViC,KAU5BkE,EAV4B,OAWlB/K,mBAAS,IAXS,mBAWjC8G,EAXiC,KAW5BkE,EAX4B,KAYlCC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC9FhJ,qBAAU,WAVNlC,EAU0B,CAAC0G,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,MAAO,CAACL,EAAKC,EAAIC,EAAIC,EAAIC,EAAIC,IAEnH,IAAMoE,EAAgB,WAAK,OACvBD,EAAO9I,KAAI,SAACC,EAAOC,GACnB,OAAO,wBAAoBD,MAAOA,EAA3B,SAAmCA,GAAtBC,OAExB,OAEQ,sBAAKH,UAAU,aAAf,UACA,uCACI,uBAAOW,QAAQ,cAAf,sBACA,wBAAQN,GAAG,cAAc4I,aAAa,KAAKzF,KAAK,UAAUD,SAAU,SAAAhD,GAAC,OAAIkI,EAAOS,SAAS3I,EAAE4I,cAAcjJ,SAAzG,SACK8I,MAGL,uBAAOrI,QAAQ,cAAf,wBACA,wBAAQN,GAAG,cAAc4I,aAAa,KAAKzF,KAAK,UAAUD,SAAU,SAAAhD,GAAC,OAAImI,EAAOQ,SAAS3I,EAAE4I,cAAcjJ,SAAzG,SACK8I,MAGL,uBAAOrI,QAAQ,cAAf,2BACA,wBAAQN,GAAG,cAAc4I,aAAa,KAAKzF,KAAK,UAAUD,SAAU,SAAAhD,GAAC,OAAIoI,EAAOO,SAAS3I,EAAE4I,cAAcjJ,SAAzG,SACK8I,MAGL,uBAAOrI,QAAQ,cAAf,2BACA,wBAAQN,GAAG,cAAc4I,aAAa,KAAKzF,KAAK,UAAUD,SAAU,SAAAhD,GAAC,OAAIqI,EAAOM,SAAS3I,EAAE4I,cAAcjJ,SAAzG,SACK8I,MAGL,uBAAOrI,QAAQ,cAAf,qBACA,wBAAQN,GAAG,cAAc4I,aAAa,KAAKzF,KAAK,UAAUD,SAAU,SAAAhD,GAAC,OAAIsI,EAAOK,SAAS3I,EAAE4I,cAAcjJ,SAAzG,SACK8I,MAGL,uBAAOrI,QAAQ,cAAf,uBACA,wBAAQN,GAAG,cAAc4I,aAAa,KAAKzF,KAAK,UAAUD,SAAU,SAAAhD,GAAC,OAAIuI,EAAOI,SAAS3I,EAAE4I,cAAcjJ,SAAzG,SACK8I,U,QC1BNI,EA1BG,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAAY,EAC3BzL,mBAAS,IADkB,mBAC9C0L,EAD8C,KACvCC,EADuC,OAE7B3L,mBAAS,IAFoB,mBAE9C4L,EAF8C,KAExCC,EAFwC,KASrD,OADA5J,qBAAU,WAJW,IAACG,EAAOC,EAAPD,EAIS,CAACsJ,MAAOA,EAAOE,KAAMA,GAJvBvJ,EAI8BmJ,EAHvDM,QAAQC,IAAI,kBAAmB3J,GAC/BmJ,EAAcnJ,EAAOC,KAE8C,CAACqJ,EAAOE,IAE3E,8BAEI,sBAAK1J,UAAU,8CAAf,UACI,qBAAKA,UAAU,cAAf,SAA6B,uBAAOI,KAAK,OAAOJ,UAAU,kCAAkCwD,KAAK,QAAQnD,GAAG,aAAayE,mBAAiB,SAASC,YAAY,GAAGxB,SAAU,SAAChD,GAAKkJ,EAASlJ,EAAEC,OAAON,YACpM,uBAAOG,GAAG,SAASL,UAAU,uBAA7B,2BACA,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBAAOW,QAAQ,qBACf,0BAAUX,UAAU,kCAAkCwD,KAAK,cAAcnD,GAAG,mBAAmB0E,YAAY,sBAAsB+E,KAAK,IAAIvG,SAAU,SAAChD,GAAKoJ,EAAQpJ,EAAEC,OAAON,aAE/K,wBAAQE,KAAK,SAASJ,UAAU,iBAAiBsJ,SAAUA,EAAUhJ,QAAS,SAACC,GAAKgJ,EAAOhJ,EAAEC,OAAO8I,WAApG,mCCiBLS,EApCF,SAAC,GAAe,IAAdlM,EAAa,EAAbA,SAAa,EACIC,mBAAS,CAAC,KADd,mBACjBkM,EADiB,KACTC,EADS,KAMlBC,EAAc,SAACC,EAAMhK,GACvB,IAAIiK,EAAS,YAAOJ,GACpBI,EAAUjK,GAASgK,EACnBF,EAAU,YAAIG,KAEZC,EAAY,SAAClK,GACf,IAAImK,EAAU,YAAON,GACrBM,EAAWC,OAAOpK,EAAM,GACxByJ,QAAQC,IAAIS,GACZL,EAAUK,IAOd,OAFAvK,qBAAU,WAFNlC,EAE0BmM,KAAU,CAACA,IAGrC,gCACI,wBAAQ5J,KAAK,SAASJ,UAAU,kBAAkBM,QAAS,SAACC,GAtBhD,IAAC4J,IAsBgE,CAACX,MAAO,GAAIE,KAAM,IArBnGO,EAAU,GAAD,mBAAKD,GAAL,CAAaG,MAqBlB,uBACC,qBAAKnK,UAAU,YAAf,SAEIgK,EAAO/J,KAAI,SAACC,EAAOC,GAChB,OACI,cAAC,EAAD,CAAuBkJ,cAAea,EAAaZ,SAAUnJ,EAAOD,MAAOA,EAAOqJ,OAAQc,GAA1ElK,YCJzBqK,EA1BI,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,eAAgBnB,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAAY,EAC7BzL,mBAAS,IADoB,mBAChD0L,EADgD,KACzCC,EADyC,OAE/B3L,mBAAS,IAFsB,mBAEhD4L,EAFgD,KAE1CC,EAF0C,KASvD,OADA5J,qBAAU,WAJW,IAACG,EAAOC,EAAPD,EAIS,CAACsJ,MAAOA,EAAOE,KAAMA,GAJvBvJ,EAI8BmJ,EAHvDM,QAAQC,IAAI,kBAAmB3J,GAC/BuK,EAAevK,EAAOC,KAE6C,CAACqJ,EAAOE,IAE3E,8BAEI,sBAAK1J,UAAU,8CAAf,UACI,qBAAKA,UAAU,cAAf,SAA6B,uBAAOI,KAAK,OAAOJ,UAAU,kCAAkCwD,KAAK,QAAQnD,GAAG,cAAcyE,mBAAiB,SAASC,YAAY,GAAGxB,SAAU,SAAChD,GAAKkJ,EAASlJ,EAAEC,OAAON,YACrM,uBAAOG,GAAG,SAASL,UAAU,uBAA7B,4BACA,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBAAOW,QAAQ,sBACf,0BAAUX,UAAU,kCAAkCwD,KAAK,cAAcnD,GAAG,oBAAoB0E,YAAY,uBAAuB+E,KAAK,IAAIvG,SAAU,SAAChD,GAAKoJ,EAAQpJ,EAAEC,OAAON,aAEjL,wBAAQE,KAAK,SAASJ,UAAU,iBAAiBsJ,SAAUA,EAAUhJ,QAAS,SAACC,GAAKgJ,EAAOhJ,EAAEC,OAAO8I,WAApG,oCCiBLoB,EApCD,SAAC,GAAe,IAAd7M,EAAa,EAAbA,SAAa,EACKC,mBAAS,CAAC,KADf,mBAClB6M,EADkB,KACTC,EADS,KAMnBC,EAAe,SAACV,EAAMhK,GACxB,IAAI2K,EAAU,YAAOH,GACrBG,EAAW3K,GAASgK,EACpBS,EAAW,YAAIE,KAEbT,EAAY,SAAClK,GACf,IAAI4K,EAAW,YAAOJ,GACtBI,EAAYR,OAAOpK,EAAM,GACzByJ,QAAQC,IAAIkB,GACZH,EAAWG,IAOf,OAFAhL,qBAAU,WAFNlC,EAE0B8M,KAAW,CAACA,IAGtC,gCACI,wBAAQvK,KAAK,SAASJ,UAAU,kBAAkBM,QAAS,SAACC,GAtB/C,IAAC4J,IAsBgE,CAACX,MAAO,GAAIE,KAAM,IArBpGkB,EAAW,GAAD,mBAAKD,GAAL,CAAcR,MAqBpB,wBACC,qBAAKnK,UAAU,YAAf,SAEI2K,EAAQ1K,KAAI,SAACC,EAAOC,GACjB,OACI,cAAC,EAAD,CAAwBsK,eAAgBI,EAAcvB,SAAUnJ,EAAOD,MAAOA,EAAOqJ,OAAQc,GAA5ElK,YCZ1B6K,EAlBS,SAAC,GAAc,IAAbnN,EAAY,EAAZA,SAAY,EACdC,mBAAS,IADK,mBAC3BmN,EAD2B,KACvBC,EADuB,KAOlC,OADAnL,qBAAU,WAFNlC,EAE0BoN,KAAM,CAACA,IAEjC,sBAAKjL,UAAU,aAAf,UACE,uBAAOW,QAAQ,SAAf,8BACA,wBAAQX,UAAU,kCAAkCwD,KAAK,GAAGnD,GAAG,SAASkD,SAAU,SAAAhD,GAAI2K,EAAM3K,EAAEC,OAAON,QAArG,SARM,CAAC,IAAK,MAAO,MAAO,MAAO,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAS/LD,KAAI,SAACC,EAAOC,GACb,OAAO,wBAAoBD,MAAOA,EAA3B,SAAmCA,GAAtBC,YCX9BgL,EAAQ,SAACC,GACX,IAKMC,EAAYC,OAAOC,KAAKH,EAAYI,QACpCC,EAAaH,OAAOC,KAAKH,EAAYxK,aAC3CgJ,QAAQC,IAAIwB,GACZ,IAAIK,EAAoB,IACxBA,GAAqB,cACjBN,EAAY5H,OACZkI,GAAqB,SAAWN,EAAY5H,KAAO,aAInD4H,EAAYO,OACZD,GAAqB,SAAWN,EAAYO,KAAO,aAEnDP,EAAYhL,OACZsL,GAAqB,SAAWN,EAAYhL,KAAO,aAEnDgL,EAAYQ,YACZF,GAAqB,cAAgBN,EAAYQ,UAAY,kBAE7DR,EAAYS,KACZH,GAAqB,OAASN,EAAYS,GAAK,WAE/CT,EAAYU,KACZJ,GAAqB,OAASN,EAAYU,GAAK,WAE/CV,EAAYW,QACZL,GAAqB,UAAYN,EAAYW,MAAQ,cAErDX,EAAYY,MAAMzH,MAClBmH,GAAqB,QAAUN,EAAYY,MAAMzH,IAAM,YAEvD6G,EAAYY,MAAMxH,MAClBkH,GAAqB,QAAUN,EAAYY,MAAMxH,IAAM,YAEvD4G,EAAYY,MAAMvH,MAClBiH,GAAqB,QAAUN,EAAYY,MAAMvH,IAAM,YAEvD2G,EAAYY,MAAMtH,MAClBgH,GAAqB,QAAUN,EAAYY,MAAMtH,IAAM,YAEvD0G,EAAYY,MAAMrH,MAClB+G,GAAqB,QAAUN,EAAYY,MAAMrH,IAAM,YAEvDyG,EAAYY,MAAMpH,MAClB8G,GAAqB,QAAUN,EAAYY,MAAMpH,IAAM,YAIvD0G,OAAOC,KAAKH,EAAYa,cAAcC,MAAK,SAAUC,GAAK,OAAOf,EAAYa,aAAaE,QAC1FT,GAAqB,UAGjBN,EAAYa,aAAa1H,MACzBmH,GAAqB,OAASN,EAAYa,aAAa1H,KAEvD6G,EAAYa,aAAazH,MACzBkH,GAAqB,OAASN,EAAYa,aAAazH,KAEvD4G,EAAYa,aAAaxH,MACzBiH,GAAqB,OAASN,EAAYa,aAAaxH,KAEvD2G,EAAYa,aAAavH,MACzBgH,GAAqB,OAASN,EAAYa,aAAavH,KAEvD0G,EAAYa,aAAatH,MACzB+G,GAAqB,OAASN,EAAYa,aAAatH,KAEvDyG,EAAYa,aAAarH,MACzB8G,GAAqB,OAASN,EAAYa,aAAarH,KAG3D8G,GAAqB,cAGrBJ,OAAOC,KAAKH,EAAYI,QAAQU,MAAK,SAAUC,GAAK,OAAOf,EAAYI,OAAOW,QAC9ET,GAAqB,WACrBL,EAAUpL,KAAI,SAACC,EAAOC,GAClB,OAlFaiM,EAkFMlM,OAjFnBkL,EAAYI,OAAOY,KACnBV,GAAqBU,EAAY,IAAMhB,EAAYI,OAAOY,KAF9C,IAACA,KAoFjBV,GAAqB,eAErBJ,OAAOC,KAAKH,EAAYxK,aAAasL,MAAK,SAAUC,GAAK,MAAqC,UAA9Bf,EAAYxK,YAAYuL,QACxFT,GAAqB,WACrBD,EAAWxL,KAAI,SAACoM,GAC6B,UAArCjB,EAAYxK,YAAYyL,KACxBX,GAAqBW,EAAa,QAG1CX,GAAqB,eAErBJ,OAAOC,KAAKH,EAAYxK,aAAasL,MAAK,SAAUC,GAAK,MAAqC,UAA9Bf,EAAYxK,YAAYuL,QACxFT,GAAqB,WACrBD,EAAWxL,KAAI,SAACoM,GACZzC,QAAQC,IAAIwC,EAAY,uBACiB,UAArCjB,EAAYxK,YAAYyL,KACxBX,GAAqBW,EAAa,QAG1CX,GAAqB,eAErBJ,OAAOC,KAAKH,EAAYxK,aAAasL,MAAK,SAAUC,GAAK,MAAqC,cAA9Bf,EAAYxK,YAAYuL,SACxFT,GAAqB,eACJJ,OAAOC,KAAKH,EAAYxK,aAC9BX,KAAI,SAACoM,GAC6B,cAArCjB,EAAYxK,YAAYyL,KACxBX,GAAqBW,EAAa,QAG1CX,GAAqB,mBAiBzB,GAbIN,EAAYkB,SACZZ,GAAqB,WAAaN,EAAYkB,OAAS,eAEvDlB,EAAYmB,UACZb,GAAqB,YAAcN,EAAYmB,QAAU,gBAEzDnB,EAAYoB,YACZd,GAAqB,cAAgBN,EAAYoB,UAAY,kBAE7DpB,EAAYH,KACZS,GAAqB,OAASN,EAAYH,GAAK,WAG/CG,EAAYpB,OAAOyC,OAAS,EAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAYpB,OAAOyC,OAAQC,IAAK,CAChD,IAAMC,EAAUvB,EAAYpB,OAAO0C,GACnChB,GAAoB,kBAAoBiB,EAAQnD,MAAQ,kBAAoBmD,EAAQjD,KAAM,sBAIlG,GAAI0B,EAAYT,QAAQ8B,OAAS,EAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAYT,QAAQ8B,OAAQC,IAAK,CACjD,IAAMC,EAAUvB,EAAYT,QAAQ+B,GACpChB,GAAoB,mBAAqBiB,EAAQnD,MAAQ,kBAAoBmD,EAAQjD,KAAM,uBAOnG,OAFAgC,GAAqB,aACrB9B,QAAQC,IAAI6B,GACLA,GAcIkB,EAVA,SAAC,GAAe,IAAbpE,EAAY,EAAZA,MACRqE,EAAe1B,EAAM3C,GAC3B,OACI,sBAAKxI,UAAU,+BAAf,UACI,oBAAIA,UAAU,YAAd,qBACA,mBAAG8M,MAAO,CAAEC,WAAY,YAAxB,SAAuCF,QC4FpCG,GAlPIC,EAAQ,KAAnBC,O,kDAIJ,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACD3E,MAAQ,CACThF,KAAM,GACNpD,KAAM,GACN4L,MAAO,CACHzH,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAETkH,GAAI,GACJD,GAAI,GACJW,UAAW,GACXb,KAAM,GACNC,UAAW,GACXG,MAAO,GACPd,GAAI,GACJqB,OAAQ,GACRC,QAAS,GACTN,aAAc,CACV1H,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAET4G,OAAQ,CACJhE,UAAW,GACXH,WAAY,GACZ+F,cAAe,GACf/E,QAAS,GACTd,OAAQ,GACRG,QAAS,GACTG,cAAe,GACfE,OAAQ,GACRI,SAAU,GACVb,eAAgB,GAChBK,QAAS,GACTG,SAAU,GACVE,WAAY,GACZM,SAAU,GACVb,UAAW,GACXG,aAAc,GACdK,YAAa,GACbC,WAAY,IAKhBtH,YAAa,CACT6B,SAAU,OACVC,SAAU,OACVC,YAAa,OACbC,OAAQ,OACRC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,QAAS,OACTC,SAAU,OACVC,UAAW,OACXC,QAAS,OACTC,MAAO,OACPC,QAAS,OACTC,WAAY,QAEhB+J,oBAAqB,CACjBC,SAAS,EACTC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,UAAU,EACVC,eAAe,EACfC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,aAAa,GAGjBpE,OAAQ,GACRW,QAAS,GACT0D,iBAAkB,GAClBC,YAAa,GACbC,YAAa,IAIjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKvB,OAAS,EAAKA,OAAOuB,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBACzB,EAAKI,uBAAyB,EAAKA,uBAAuBJ,KAA5B,gBAC9B,EAAKK,2BAA6B,EAAKA,2BAA2BL,KAAhC,gBAClC,EAAKM,mBAAqB,EAAKA,mBAAmBN,KAAxB,gBAC1B,EAAKO,sBAAwB,EAAKA,sBAAsBP,KAA3B,gBAC7B,EAAKQ,kBAAoB,EAAKA,kBAAkBR,KAAvB,gBAxGV,E,oDA2GnB,SAAiBtE,GACb+E,KAAKC,SAAS,CAACnD,MAAO7B,M,8BAE1B,SAAiBA,GACb+E,KAAKC,SAAS,CAAClD,aAAc9B,M,+BAEjC,SAAkBA,GACd+E,KAAKC,SAAS,CAAC3D,OAAQrB,M,oCAE3B,SAAuBA,GACnB+E,KAAKC,SAAS,CAACvO,YAAauJ,M,wCAEhC,SAA2BA,GACvB+E,KAAKC,SAAS,CAAClE,GAAId,M,gCAEvB,SAAmBA,GAEf+E,KAAKC,SAAS,CAACxE,QAASR,M,+BAE5B,SAAkBA,GAEd+E,KAAKC,SAAS,CAACnF,OAAQG,M,mCAE3B,SAAsBA,GAClB+E,KAAKC,SAAS,CAAC9B,oBAAqBlD,M,0BAGxC,SAAaiF,GACT,IAAM5O,EAAS4O,EAAM5O,OACfN,EAAwB,aAAhBM,EAAOJ,KAAsBI,EAAOC,QAAUD,EAAON,MAC7DsD,EAAOhD,EAAOgD,KACpB0L,KAAKC,SAAL,eAAiB3L,EAAOtD,M,oBAG5B,WACI,OACI,iCACI,sBAAKF,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,kBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY0E,YAAY,gBAAgBvB,KAAK,OAAOtD,MAAOgP,KAAK1G,MAAMhF,KAAMD,SAAU2L,KAAKV,aAAcxO,UAAU,wCAE7I,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,kBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY0E,YAAY,6BAA6BvB,KAAK,OAAOtD,MAAOgP,KAAK1G,MAAMpI,KAAMmD,SAAU2L,KAAKV,aAAcxO,UAAU,uCAE1J,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,kBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY0E,YAAY,6BAA6BvB,KAAK,OAAOtD,MAAOgP,KAAK1G,MAAMmD,KAAMpI,SAAU2L,KAAKV,aAAcxO,UAAU,0CAG9J,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,iBAAf,uBACA,uBAAOP,KAAK,OAAOC,GAAG,iBAAiB0E,YAAY,kCAAkCvB,KAAK,YAAYtD,MAAOgP,KAAK1G,MAAMoD,UAAWrI,SAAU2L,KAAKV,aAAcxO,UAAU,uCAE9K,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,UAAf,gBACA,uBAAOP,KAAK,OAAOC,GAAG,UAAU0E,YAAY,iDAAiDvB,KAAK,KAAKtD,MAAOgP,KAAK1G,MAAMsD,GAAIvI,SAAU2L,KAAKV,aAAcxO,UAAU,uCAExK,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,aAAf,gBACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa0E,YAAY,kBAAkBvB,KAAK,KAAKtD,MAAOgP,KAAK1G,MAAMqD,GAAItI,SAAU2L,KAAKV,aAAcxO,UAAU,0CAGhJ,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,aAAf,mBACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa0E,YAAY,4BAA4BvB,KAAK,QAAQtD,MAAOgP,KAAK1G,MAAMuD,MAAOxI,SAAU2L,KAAKV,aAAcxO,UAAU,uCAE5J,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,uBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY0E,YAAY,2BAA2BvB,KAAK,YAAYtD,MAAOgP,KAAK1G,MAAMgE,UAAWjJ,SAAU2L,KAAKV,aAAcxO,UAAU,uCAElK,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,aAAf,sBACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa0E,YAAY,oBAAoBvB,KAAK,SAAStD,MAAOgP,KAAK1G,MAAM8D,OAAQ/I,SAAU2L,KAAKV,aAAcxO,UAAU,0CAG1J,cAAC,EAAD,CAAiBwI,MAAO0G,KAAK1G,MAAOtI,MAAOgP,KAAK1G,MAAMwD,MAAOnO,SAAUqR,KAAKJ,6BAC5E,uBAKA,cAAC,EAAD,CAAOtG,MAAO0G,KAAK1G,MAAOtI,MAAOgP,KAAK1G,MAAMwD,MAAOnO,SAAUqR,KAAKR,mBAClE,gCACI,kDAGA,cAAC,EAAD,CAAOnL,SAAU2L,KAAKV,aAAchG,MAAO0G,KAAK1G,MAAO3K,SAAUqR,KAAKP,sBAE1E,gCACI,2CAGA,cAAC,EAAD,CAAQ9Q,SAAUqR,KAAKN,uBA5D/B,sDA+DI,gCACI,kCACI,mBAAG5O,UAAU,oBAAoByD,cAAY,SADjD,2DAGA,cAAC,EAAD,CAAa+E,MAAO0G,KAAK1G,MAAO3K,SAAUqR,KAAKL,4BAEnD,gCACI,yDAGA,cAAC,EAAD,CAAYtL,SAAU2L,KAAKV,aAAc3Q,SAAUqR,KAAKF,2BAE5D,wCACA,cAAC,EAAD,CAAQzL,SAAU2L,KAAKV,aAAchG,MAAO0G,KAAK1G,MAAO3K,SAAUqR,KAAKD,oBACvE,yCACA,cAAC,EAAD,CAAS1L,SAAU2L,KAAKV,aAAchG,MAAO0G,KAAK1G,MAAO3K,SAAUqR,KAAKH,qBAQxE,sBAAK/O,UAAU,GAAf,UACI,uBAAOW,QAAQ,mBAAf,2BACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa0E,YAAY,wBAAwBvB,KAAK,cAActD,MAAOgP,KAAK1G,MAAM+F,YAAahL,SAAU2L,KAAKV,aAAcxO,UAAU,uCAEpK,cAAC,EAAD,CAAQwI,MAAO0G,KAAK1G,e,GA5OdyE,EAAQ,GAAtBoC,Y,OCcOC,MApBf,WACE,OACE,sBAAKtP,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,uDAEA,cAAC,EAAD,IACF,8BACE,mBAAGA,UAAU,uBAAb,qOAIF,mCACE,oBAAGuP,KAAK,uDAAR,kCAAoF,mBAAGvP,UAAU,eAAeyD,cAAY,YAC5H,8BAAG,mBAAGzD,UAAU,kBAAkByD,cAAY,SAA9C,mCCNO+L,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS/C,OACP,cAAC,IAAMgD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae04dcb1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component, useState, useEffect} from \"react\";\n\n// should be collapsable, with a number to show how many conditions are checked while it is collapsed. \nconst Conditions = ({sendData}) => {\n    const [blinded, setBlinded] = useState(false)\n    const [charmed, setCharmed] = useState(false)\n    const [deafened, setDeafened] = useState(false)\n    const [exhaustion, setExhaustion] = useState(false)\n    const [frightened, setFrightened] = useState(false)\n    const [grappled, setGrappled] = useState(false)\n    const [incapacitated, setIncapacitated] = useState(false)\n    const [invisible, setInvisible] = useState(false)\n    const [paralyzed, setParalyzed] = useState(false)\n    const [poisoned, setPoisoned] = useState(false)\n    const [petrified, setPetrified] = useState(false)\n    const [prone, setProne] = useState(false)\n    const [restrained, setRestrained] = useState(false)\n    const [stunned, setStunned] = useState(false)\n    const [unconscious, setUnconscious] = useState(false)\n\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n    const conditionList = [\"Blinded\", \"Charmed\", \"Deafened\", \"Exhaustion\", \"Frightened\", \"Grappled\", \"Incapacitated\", \"Invisible\", \"Paralyzed\", \"Petrified\", \"Poisoned\", \"Prone\", \"Restrained\", \"Stunned\", \"Unconscious\",]\n    const conditionSet = [setBlinded, setCharmed, setDeafened, setExhaustion, setFrightened, setGrappled, setIncapacitated, setInvisible, setParalyzed, setPetrified, setPoisoned, setProne, setRestrained, setStunned, setUnconscious]\n    const conditionVar = [blinded, charmed, deafened, exhaustion, frightened, grappled, incapacitated, invisible, paralyzed, petrified, poisoned, prone, restrained, stunned, unconscious]\n    useEffect(() => {callBackMethod({blinded: blinded, charmed: charmed, deafened: deafened, exhaustion: exhaustion, frightened: frightened, grappled: grappled, incapacitated: incapacitated, invisible: invisible, paralyzed: paralyzed, poisoned: poisoned, petrified: petrified, prone: prone, restrained: restrained, stunned: stunned, unconscious: unconscious})\n    }, conditionVar)\n\n    return (\n        <div className=\"row\">\n            {conditionList.map((value, index) => {\n                //buttons need to be toggleable!\n                return (\n                    <div className=\"custom-control custom-switch\" key={index}>\n                        <input type=\"checkbox\" className=\"custom-control-input\" id={value+\"Btn\"} onClick={(e) => conditionSet[index](e.target.checked)}  defaultChecked={conditionVar[index]}></input>\n                        <label className=\"custom-control-label\" htmlFor={value+\"Btn\"}>{value}</label>\n                    </div>\n                    // <div className=\"form-group-btn\" key={index}>\n                    //     <button type=\"button\" className=\"btn btn-toggle btn-secondary\" data-toggle={conditionVar[index]} name=\"\" id={value + \"Btn\"} value={conditionVar[index]} onClick={(e) => conditionSet[index](!e.target.value)}>\n                    //         {value}\n                    //     </button>\n                    // </div>\n                )\n            }\n            )}\n        </div>\n    )\n}\nexport default Conditions","//used to denote all available damage types, for immunity/vulnerability/resistance\n//should this be one section with 3 checkboxes for each type?  alternative takes up a lot of space.  \n//currently only one box per type\n\n//sending back array of 3 objects,\nimport React, { useState, useEffect } from 'react'\n\nconst DamageTypes = ({ sendData }) => {\n    const [slashing, setSlashing] = useState(\"none\")\n    const [piercing, setPiercing] = useState(\"none\")\n    const [bludgeoning, setBludgeoning] = useState(\"none\")\n    const [poison, setPoison] = useState(\"none\")\n    const [acid, setAcid] = useState(\"none\")\n    const [fire, setFire] = useState(\"none\")\n    const [cold, setCold] = useState(\"none\")\n    const [radiant, setRadiant] = useState(\"none\")\n    const [necrotic, setNecrotic] = useState(\"none\")\n    const [lightning, setLightning] = useState(\"none\")\n    const [thunder, setThunder] = useState(\"none\")\n    const [force, setForce] = useState(\"none\")\n    const [psychic, setPsychic] = useState(\"none\")\n    const [nonmagical, setNonmagical] = useState(\"none\")\n    const typeList = [\"Slashing\", \"Piercing\", \"Bludgeoning\", \"Poison\", \"Acid\", \"Fire\", \"Cold\", \"Radiant\", \"Necrotic\", \"Lightning\", \"Thunder\", \"Force\", \"Psychic\", \"Nonmagical\"];\n    const setDamage = [setSlashing, setPiercing, setBludgeoning, setPoison, setAcid, setFire, setCold, setRadiant, setNecrotic, setLightning, setThunder, setForce, setPsychic, setNonmagical];\n    const callBackMethod = (value) => {\n        sendData(value);\n    }\n    useEffect(() => {\n        callBackMethod({\n            Slashing: slashing,\n            Piercing: piercing,\n            Bludgeoning: bludgeoning,\n            Poison: poison,\n            Acid: acid,\n            Fire: fire,\n            Cold: cold,\n            Radiant: radiant,\n            Necrotic: necrotic,\n            Lightning: lightning,\n            Thunder: thunder,\n            Force: force,\n            Psychic: psychic,\n            Nonmagical: nonmagical,\n        })\n    }, [slashing, piercing, bludgeoning, poison, acid, fire, cold, radiant, necrotic, lightning, thunder, force, psychic, nonmagical])\n    return (\n        <div className=\"form-group row\">\n            {typeList.map((value, index) => {\n                return (\n                    <div className=\"form-check form-check-inline\" key={index} id={value+\"Radio\"} onChange={(e) => { setDamage[index](e.target.value) }}>\n                        <label className=\"form-check-label\" htmlFor={value + \"Box\"}>\n                            {value}\n                        </label>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio1\"} value=\"none\" defaultChecked></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\"><i className=\"fa fa-fist-raised\" aria-hidden=\"true\"></i></label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio2\"} value=\"resistant\"></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">R</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio3\"} value=\"immune\"></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">I</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name={\"inlineRadioOptions\"+value} id={value + \"inlineRadio4\"} value=\"vulnerable\"></input>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio4\">V</label>\n                        </div>\n\n\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\nexport default DamageTypes","import React, { Component, useState, useEffect } from 'react';\n\nconst Saves = ({sendData}) => {\n  const saveThrows = [\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"]\n  const [strSave, setStrSave] = useState(\"\")\n  const [dexSave, setDexSave] = useState(\"\")\n  const [conSave, setConSave] = useState(\"\")\n  const [intSave, setIntSave] = useState(\"\")\n  const [wisSave, setWisSave] = useState(\"\")\n  const [chaSave, setChaSave] = useState(\"\")\n  const callBackMethod=(value)=>{\n    sendData(value);\n  }   \n  useEffect(()=>{callBackMethod({str: strSave, dex:dexSave, con: conSave, int: intSave, wis: wisSave, cha: chaSave})},[strSave, dexSave, conSave, intSave, wisSave, chaSave])\n  const setSave = [setStrSave, setDexSave, setConSave, setIntSave, setWisSave, setChaSave];\n  return (\n    <div className=\"form-group row\">\n      {saveThrows.map((value, index) => {\n        //no check boxes, empty box means no change from base stats\n        return (\n          <div className=\"form-check\" key={index}>\n            <label className=\"form-check-label\" htmlFor={value + \"Box\"}>\n              {value}\n            </label>\n            <div className=\"form-group\">\n              <label htmlFor={value + \"Mod\"}></label>\n              <input type=\"text\" className=\"form-control bg-dark text-light\" name=\"\" id={value + \"Mod\"} aria-describedby=\"helpId\" placeholder=\"+0\" onChange={e=>setSave[index](e.target.value)}/>\n              <small id=\"helpId\" className=\"form-text text-muted\">Mod value, ex. +4</small>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\nexport default Saves;","import React, {Component, useState, useEffect} from 'react';\nconst Skills =({sendData})=>{\n\n    const [acrobatics, setAcrobatics] = useState(\"\");\n    const [animalHandling, setAnimalHandling] = useState(\"\");\n    const [arcana, setArcana] = useState(\"\");\n    const [athletics, setAthletics] = useState(\"\");\n    const [deception, setDeception] = useState(\"\");\n    const [history, setHistory] = useState(\"\");\n    const [insight, setInsight] = useState(\"\");\n    const [intimidation, setIntimidation] = useState(\"\");\n    const [investigation, setInvestigation] = useState(\"\");\n    const [medicine, setMedicine] = useState(\"\");\n    const [nature, setNature] = useState(\"\");\n    const [perception, setPerception] = useState(\"\");\n    const [performance, setPerformance] = useState(\"\");\n    const [persuasion, setPersuasion] = useState(\"\");\n    const [religion, setReligion] = useState(\"\");\n    const [sleightOfHand, setSlightOfHand] = useState(\"\");\n    const [stealth, setStealth] = useState(\"\");\n    const [survival, setSurvival] = useState(\"\");\n\n    const skillList = [\"Acrobatics\", \"AnimalHandling\", \"Arcana\", \"Athletics\", \"Deception\", \"History\", \"Insight\", \"Intimidation\", \"Investigation\", \"Medicine\", \"Nature\", \"Perception\", \"Performance\", \"Persuasion\", \"Religion\", \"SlightOfHand\", \"Stealth\", \"Survival\"]\n    const skillSet = [setAcrobatics, setAnimalHandling, setArcana, setAthletics, setDeception, setHistory, setInsight, setIntimidation, setInvestigation, setMedicine, setNature, setPerception, setPerformance, setPersuasion, setReligion, setSlightOfHand, setStealth, setSurvival]\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n    useEffect(()=>{callBackMethod({Acrobatics: acrobatics, AnimalHandling: animalHandling, Arcana: arcana, Athletics: athletics, Deception: deception, History: history, Insight: insight, Intimidation: intimidation, Investigation: investigation, Medicine: medicine, Nature: nature, Perception: perception, Performance: performance, Persuasion: persuasion, Religion: religion, SlightOfHand: sleightOfHand, Stealth: stealth, Survival: survival})},[acrobatics, animalHandling, arcana, athletics, deception, history, insight, intimidation, investigation, medicine, nature, perception, performance, persuasion, religion, sleightOfHand, stealth, survival])\n    return(\n        <div>\n            {skillList.map((value,index)=>{\n                return(\n                    <div className=\"form-check-inline form-group\" key={index}>\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text bg-dark text-light\" htmlFor={value + \"Box\"}>\n                                    {value}\n                                </span>\n                                <input type=\"text\" className=\"form-control col-xs-1 bg-dark text-light\" name=\"\" id={value+\"Mod\"} aria-describedby=\"helpId\" placeholder=\"+0 (default)\" onChange={e=>skillSet[index](e.target.value)}/>\n                            </div>\n                        </div>\n                    // </div>\n                )\n            })}\n        </div>\n    )\n\n}\nexport default Skills","\nimport {useState, useEffect, Component} from 'react';\n\nconst Stats =({onChange, state, sendData})=>{\n    //should be able to send the object to parent needs to trigger when state is changed, so that the parent recieves value\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n\n    const [str, setStr] = useState(10);\n    const [dex, setDex] = useState(10);\n    const [con, setCon] = useState(10);\n    const [int, setInt] = useState(10);\n    const [wis, setWis] = useState(10);\n    const [cha, setCha] = useState(10);\n    const scores = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n    useEffect(()=>{callBackMethod({str: str, dex: dex, con: con, int: int, wis: wis, cha: cha})},[str, dex,con,int,wis,cha])\n    // attempting to stop repeating self\n    const scoresArrayMap =()=>{return(\n        scores.map((value, index) => {\n        return <option key={index} value={value}>{value}</option>\n    }))}\n    return(\n\n            <div className=\"form-group\">\n            <h3>Stats</h3>\n                <label htmlFor=\"strSelector\">Strength</label>\n                <select id=\"strSelector\" defaultValue=\"10\" name=\"strStat\" onChange={e => setStr(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"dexSelector\"> Dexterity</label>\n                <select id=\"dexSelector\" defaultValue=\"10\" name=\"dexStat\" onChange={e => setDex(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"conSelector\"> Constitution</label>\n                <select id=\"conSelector\" defaultValue=\"10\" name=\"conStat\" onChange={e => setCon(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"intSelector\"> Intelligence</label>\n                <select id=\"intSelector\" defaultValue=\"10\" name=\"intStat\" onChange={e => setInt(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"wisSelector\"> Wisdom</label>\n                <select id=\"wisSelector\" defaultValue=\"10\" name=\"wisStat\" onChange={e => setWis(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"chaSelector\"> Charisma</label>\n                <select id=\"chaSelector\" defaultValue=\"10\" name=\"chaStat\" onChange={e => setCha(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n        </div>\n    )\n}\nexport default Stats","import { Component, useState, useEffect } from \"react\";\nconst TraitCard = ({sendTraitData, eleindex, remove}) => {\n    const [title, setTitle] = useState(\"\")\n    const [text, setText] = useState(\"\")\n\n    const callBackMethod=(value, index)=>{\n        console.log('sending value: ', value)\n        sendTraitData(value, index);\n    }\n    useEffect(()=>{ callBackMethod({title: title, text: text}, eleindex)}, [title, text])\n    return (\n        <div>\n            {/* remove buton for each card  */}\n            <div className=\"card text-white bg-dark mb-3 d-inline-block\">\n                <div className=\"card-header\"><input type=\"text\" className=\"form-control bg-dark text-light\" name=\"title\" id=\"traitTitle\" aria-describedby=\"helpId\" placeholder=\"\" onChange={(e)=>{setTitle(e.target.value)}}/></div>\n                <small id=\"helpId\" className=\"form-text text-muted\" >Name of trait</small>\n                <div className=\"card-body\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"traitDescription\"></label>\n                        <textarea className=\"form-control bg-dark text-light\" name=\"description\" id=\"traitDescription\" placeholder=\"describe trait here\" rows=\"3\" onChange={(e)=>{setText(e.target.value)}}></textarea>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-danger\" eleindex={eleindex} onClick={(e)=>{remove(e.target.eleindex)}}>Remove Trait</button>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default TraitCard","import {Component, useState, useEffect} from 'react';\nimport TraitCard from '../components/TraitCard'\nconst Traits=({sendData})=> {\n    const [traits, setTraits] = useState([{}])\n    const addNewTrait = (data)=>{\n        setTraits([...traits, data])\n    }\n    // problem: there are 2 ways to edit state, one that adds a \"blank\" trait card, and another that updates the content of that state based on the changes in the card, or removes the card if the remove button was (clicked and confirmed?).  \n    const modifyTrait = (data, index)=>{\n        let newTraits = [...traits]\n        newTraits[index] = data\n        setTraits([...newTraits])//TODO\n    }\n    const cardDeleter=(index)=>{\n        let traitGroup = [...traits]\n        traitGroup.splice(index,1);\n        console.log(traitGroup);\n        setTraits(traitGroup);\n        }\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }\n    useEffect(()=>{callBackMethod(traits)}, [traits])\n\n    return(\n        <div>\n            <button type=\"button\" className=\"btn btn-success\" onClick={(e)=>{addNewTrait({title: \"\", text: \"\"})}}>Add Trait</button>\n             <div className=\"card-deck\">\n                \n                {traits.map((value, index)=>{\n                    return (\n                        <TraitCard key={index} sendTraitData={modifyTrait} eleindex={index} value={value} remove={cardDeleter}></TraitCard>\n                        )\n                    })}\n                </div>\n        </div>\n    )\n}\nexport default Traits;","import { Component, useState, useEffect } from \"react\";\nconst ActionCard = ({sendActionData, eleindex, remove}) => {\n    const [title, setTitle] = useState(\"\")\n    const [text, setText] = useState(\"\")\n\n    const callBackMethod=(value, index)=>{\n        console.log('sending value: ', value)\n        sendActionData(value, index);\n    }\n    useEffect(()=>{ callBackMethod({title: title, text: text}, eleindex)}, [title, text])\n    return (\n        <div>\n            {/* remove buton for each card  */}\n            <div className=\"card text-white bg-dark mb-3 d-inline-block\">\n                <div className=\"card-header\"><input type=\"text\" className=\"form-control bg-dark text-light\" name=\"title\" id=\"actionTitle\" aria-describedby=\"helpId\" placeholder=\"\" onChange={(e)=>{setTitle(e.target.value)}}/></div>\n                <small id=\"helpId\" className=\"form-text text-muted\" >Name of action</small>\n                <div className=\"card-body\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"actionDescription\"></label>\n                        <textarea className=\"form-control bg-dark text-light\" name=\"description\" id=\"actionDescription\" placeholder=\"describe action here\" rows=\"3\" onChange={(e)=>{setText(e.target.value)}}></textarea>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-danger\" eleindex={eleindex} onClick={(e)=>{remove(e.target.eleindex)}}>Remove Action</button>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default ActionCard","import {Component, useState, useEffect} from 'react';\nimport ActionCard from '../components/ActionCard'\nconst Actions=({sendData})=> {\n    const [actions, setActions] = useState([{}])\n    const addNewAction = (data)=>{\n        setActions([...actions, data])\n    }\n    // problem: there are 2 ways to edit state, one that adds a \"blank\" action card, and another that updates the content of that state based on the changes in the card, or removes the card if the remove button was (clicked and confirmed?).  \n    const modifyAction = (data, index)=>{\n        let newActions = [...actions]\n        newActions[index] = data\n        setActions([...newActions])//TODO\n    }\n    const cardDeleter=(index)=>{\n        let actionGroup = [...actions]\n        actionGroup.splice(index,1);\n        console.log(actionGroup);\n        setActions(actionGroup);\n        }\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }\n    useEffect(()=>{callBackMethod(actions)}, [actions])\n\n    return(\n        <div>\n            <button type=\"button\" className=\"btn btn-success\" onClick={(e)=>{addNewAction({title: \"\", text: \"\"})}}>Add Action</button>\n             <div className=\"card-deck\">\n                \n                {actions.map((value, index)=>{\n                    return (\n                        <ActionCard key={index} sendActionData={modifyAction} eleindex={index} value={value} remove={cardDeleter}></ActionCard>\n                        )\n                    })}\n                </div>\n        </div>\n    )\n}\nexport default Actions;","import {useState, useEffect} from 'react'\nconst ChallengeRating = ({sendData})=>{\n    const [cr, setCr] = useState(\"\")\n    const crs = [\"0\", \"1/8\", \"1/4\", \"1/2\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"]\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n    useEffect(()=>{callBackMethod(cr)}, [cr])\n    return(\n        <div className=\"form-group\">\n          <label htmlFor=\"crForm\">Challenge Rating</label>\n          <select className=\"form-control bg-dark text-light\" name=\"\" id=\"crForm\" onChange={e=>{setCr(e.target.value)}}>\n            {crs.map((value, index)=>{\n                return <option key={index} value={value}>{value}</option>;\n            })}\n          </select>\n        </div>\n    )\n}\nexport default ChallengeRating;","//import problem for some reason it is not exported, currently putting in this file\n//import { toXML } from \"../devLogic/export.js\";\nconst toXML = (stateObject) => {\n    const updateSkill = (skillName) => {\n        if (stateObject.skills[skillName]) {\n            xmlDocumentString += skillName + \" \" + stateObject.skills[skillName] //plus possible comma?\n        }\n    }\n    const skillList = Object.keys(stateObject.skills)\n    const damageList = Object.keys(stateObject.DamageTypes)\n    console.log(skillList)\n    let xmlDocumentString = \"\";\n    xmlDocumentString += \"<monster>\\n\"\n    if (stateObject.name) {\n        xmlDocumentString += \"<name>\" + stateObject.name + \"</name>\\n\"\n    } /*else {\n        console.error(\"no name given\");\n    }*/\n    if (stateObject.size) {\n        xmlDocumentString += \"<size>\" + stateObject.size + \"</size>\\n\"\n    }\n    if (stateObject.type) {\n        xmlDocumentString += \"<type>\" + stateObject.type + \"</type>\\n\"\n    }\n    if (stateObject.alignment) {\n        xmlDocumentString += \"<alignment>\" + stateObject.alignment + \"</alignment>\\n\"\n    }\n    if (stateObject.ac) {\n        xmlDocumentString += \"<ac>\" + stateObject.ac + \"</ac>\\n\"\n    }\n    if (stateObject.hp) {\n        xmlDocumentString += \"<hp>\" + stateObject.hp + \"</hp>\\n\"\n    }\n    if (stateObject.speed) {\n        xmlDocumentString += \"<speed>\" + stateObject.speed + \"</speed>\\n\"\n    }\n    if (stateObject.stats.str) {\n        xmlDocumentString += \"<str>\" + stateObject.stats.str + \"</str>\\n\"\n    }\n    if (stateObject.stats.dex) {\n        xmlDocumentString += \"<dex>\" + stateObject.stats.dex + \"</dex>\\n\"\n    }\n    if (stateObject.stats.con) {\n        xmlDocumentString += \"<con>\" + stateObject.stats.con + \"</con>\\n\"\n    }\n    if (stateObject.stats.int) {\n        xmlDocumentString += \"<int>\" + stateObject.stats.int + \"</int>\\n\"\n    }\n    if (stateObject.stats.wis) {\n        xmlDocumentString += \"<wis>\" + stateObject.stats.wis + \"</wis>\\n\"\n    }\n    if (stateObject.stats.cha) {\n        xmlDocumentString += \"<cha>\" + stateObject.stats.cha + \"</cha>\\n\"\n    }\n\n    //if there are any saves, open saves tag\n    if (Object.keys(stateObject.savingThrows).some(function (k) { return stateObject.savingThrows[k] })) {\n        xmlDocumentString += \"<saves>\"\n        //for each saving throw, if its there, print the abbreviated stat, a space, and the modifier, \n        //Todo I think they must be comma separated\n        if (stateObject.savingThrows.str) {\n            xmlDocumentString += \"Str \" + stateObject.savingThrows.str\n        }\n        if (stateObject.savingThrows.dex) {\n            xmlDocumentString += \"Dex \" + stateObject.savingThrows.dex\n        }\n        if (stateObject.savingThrows.con) {\n            xmlDocumentString += \"Con \" + stateObject.savingThrows.con\n        }\n        if (stateObject.savingThrows.int) {\n            xmlDocumentString += \"Int \" + stateObject.savingThrows.int\n        }\n        if (stateObject.savingThrows.wis) {\n            xmlDocumentString += \"Wis \" + stateObject.savingThrows.wis\n        }\n        if (stateObject.savingThrows.cha) {\n            xmlDocumentString += \"Cha \" + stateObject.savingThrows.cha\n        }\n        //close saves tag\n        xmlDocumentString += \"</saves>\\n\"\n    }\n    //same with skills\n    if (Object.keys(stateObject.skills).some(function (k) { return stateObject.skills[k] })) {\n        xmlDocumentString += \"<skills>\"\n        skillList.map((value, index) => {\n            return updateSkill(value)\n        })\n        xmlDocumentString += \"</skills>\\n\"\n    }\n    if (Object.keys(stateObject.DamageTypes).some(function (k) { return stateObject.DamageTypes[k] == \"resist\" })) {\n        xmlDocumentString += \"<resist>\"\n        damageList.map((damageName) => {\n            if (stateObject.DamageTypes[damageName]==\"resist\") {\n                xmlDocumentString += damageName + \" \"\n            }\n        })\n        xmlDocumentString += \"</resist>\\n\"\n    }\n    if (Object.keys(stateObject.DamageTypes).some(function (k) { return stateObject.DamageTypes[k] == \"immune\" })) {\n        xmlDocumentString += \"<immune>\"\n        damageList.map((damageName) => {\n            console.log(damageName, \" checked for immune\")\n            if (stateObject.DamageTypes[damageName]==\"immune\") {\n                xmlDocumentString += damageName + \" \"\n            }\n        })\n        xmlDocumentString += \"</immune>\\n\"\n    }\n    if (Object.keys(stateObject.DamageTypes).some(function (k) { return stateObject.DamageTypes[k] == \"vulnerable\" })) {\n        xmlDocumentString += \"<vulnerable>\";\n        let damageList = Object.keys(stateObject.DamageTypes)\n        damageList.map((damageName) => {\n            if (stateObject.DamageTypes[damageName]==\"vulnerable\") {\n                xmlDocumentString += damageName + \" \"\n            }\n        })\n        xmlDocumentString += \"</vulnerable>\\n\"\n    }\n    //also res,immune, and vuln\n\n    if (stateObject.senses) {\n        xmlDocumentString += \"<senses>\" + stateObject.senses + \"</senses>\\n\"\n    }\n    if (stateObject.passive) {\n        xmlDocumentString += \"<passive>\" + stateObject.passive + \"</passive>\\n\"\n    }\n    if (stateObject.languages) {\n        xmlDocumentString += \"<languages>\" + stateObject.languages + \"</languages>\\n\"\n    }\n    if (stateObject.cr) {\n        xmlDocumentString += \"<cr>\" + stateObject.cr + \"</cr>\\n\"\n    }\n    //traits actions and legendary?\n    if (stateObject.traits.length > 0){\n        for (let i = 0; i < stateObject.traits.length; i++) {\n            const element = stateObject.traits[i];\n            xmlDocumentString+= \"<trait>\\n<name>\" + element.title + \"</name>\\n<text>\" + element.text +\"</text>\\n</trait>\\n\"\n            \n        }\n    }\n    if (stateObject.actions.length > 0){\n        for (let i = 0; i < stateObject.actions.length; i++) {\n            const element = stateObject.actions[i];\n            xmlDocumentString+= \"<action>\\n<name>\" + element.title + \"</name>\\n<text>\" + element.text +\"</text>\\n</action>\\n\"\n            \n        }\n    }\n    //finish xml by closing monster tag\n    xmlDocumentString += \"</monster>\"\n    console.log(xmlDocumentString)\n    return xmlDocumentString;\n    //do stuff with it now!\n}\n\nconst Output = ({ state }) => {\n    const outputString = toXML(state);\n    return (\n        <div className=\"jumbotron bg-dark text-light\">\n            <h1 className=\"display-3\">Output:</h1>\n            <p style={{ whiteSpace: \"pre-wrap\" }}>{outputString}</p>\n        </div>\n\n    )\n}\nexport default Output;","import Conditions from '../components/Conditions';\nimport DamageTypes from '../components/DamageTypes';\nimport Saves from '../components/Saves';\nimport Skills from '../components/Skills';\nimport Stats from '../components/stats';\nimport Traits from './Traits';\nimport Actions from './Actions';\nimport ChallengeRating from '../components/ChallengeRating';\nimport Output from './output';\nconst { render } = require(\"@testing-library/react\")\nconst { Component } = require(\"react\")\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            type: '',\n            stats: {\n                str: 10,\n                dex: 10,\n                con: 10,\n                int: 10,\n                wis: 10,\n                cha: 10,\n            },\n            hp: '',\n            ac: '',\n            languages: '',\n            size: '',\n            alignment: '',\n            speed: '',\n            cr: '',\n            senses: '',\n            passive: '',\n            savingThrows: {\n                str: '',\n                dex: '',\n                con: '',\n                int: '',\n                wis: '',\n                cha: '',\n            },\n            skills: {\n                Athletics: '',\n                Acrobatics: '',\n                SleightOfHand: '',\n                Stealth: '',\n                Arcana: '',\n                History: '',\n                Investigation: '',\n                Nature: '',\n                Religion: '',\n                AnimalHandling: '',\n                Insight: '',\n                Medicine: '',\n                Perception: '',\n                Survival: '',\n                Deception: '',\n                Intimidation: '',\n                Performance: '',\n                Persuasion: '',\n            },\n            //what if we put all damage types in an object, and labeled them with a string \"none\", \"resist\", \"immune\", \"vulnerable\". \n            //this would better reflect how the damagetypes component works. \n            //possibly use integers in the future to optimize\n            DamageTypes: {\n                Slashing: \"none\",\n                Piercing: \"none\",\n                Bludgeoning: \"none\",\n                Poison: \"none\",\n                Acid: \"none\",\n                Fire: \"none\",\n                Cold: \"none\",\n                Radiant: \"none\",\n                Necrotic: \"none\",\n                Lightning: \"none\",\n                Thunder: \"none\",\n                Force: \"none\",\n                Psychic: \"none\",\n                Nonmagical: \"none\",\n            },\n            conditionImmunities: {\n                Blinded: false,\n                Charmed: false,\n                Deafened: false,\n                Exhaustion: false,\n                Frightened: false,\n                Grappled: false,\n                Incapacitated: false,\n                Invisible: false,\n                Paralyzed: false,\n                Petrified: false,\n                Poisoned: false,\n                Prone: false,\n                Restrained: false,\n                Stunned: false,\n                Unconscious: false,\n\n            },\n            traits: [],\n            actions: [],\n            legendaryActions: [],\n            description: \"\",\n            environment: \"\"\n\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.render = this.render.bind(this);\n        this.getDataFromStats = this.getDataFromStats.bind(this);\n        this.getDataFromSaves = this.getDataFromSaves.bind(this);\n        this.getDataFromSkills = this.getDataFromSkills.bind(this);\n        this.getDataFromDamageTypes = this.getDataFromDamageTypes.bind(this)\n        this.getDataFromChallengeRating = this.getDataFromChallengeRating.bind(this)\n        this.getDataFromActions = this.getDataFromActions.bind(this)\n        this.getDataFromConditions = this.getDataFromConditions.bind(this)\n        this.getDataFromTraits = this.getDataFromTraits.bind(this)\n    }\n    //gets data sent from stats via prop, assigns to state.stats\n    getDataFromStats(data) {\n        this.setState({stats: data})\n    }\n    getDataFromSaves(data) {\n        this.setState({savingThrows: data})\n    }\n    getDataFromSkills(data) {\n        this.setState({skills: data})\n    }\n    getDataFromDamageTypes(data) {\n        this.setState({DamageTypes: data})\n    }\n    getDataFromChallengeRating(data){\n        this.setState({cr: data});\n    }\n    getDataFromActions(data){\n        //TODO\n        this.setState({actions: data});\n    }\n    getDataFromTraits(data){\n        //TODO\n        this.setState({traits: data});\n    }\n    getDataFromConditions(data){\n        this.setState({conditionImmunities: data})\n    }\n    //processes elements directly on this component/container\n    handleChange(event) {\n        const target = event.target\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({ [name]: value });\n    }\n\n    render() {\n        return (\n            <form>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"nameInput\">Name</label>\n                        <input type=\"text\" id=\"nameInput\" placeholder=\"creature name\" name=\"name\" value={this.state.name} onChange={this.handleChange} className=\"form-control bg-dark  text-light\" />\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"typeInput\">Type</label>\n                        <input type=\"text\" id=\"typeInput\" placeholder=\"Humanoid, monstrosity, etc\" name=\"type\" value={this.state.type} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"sizeInput\">Size</label>\n                        <input type=\"text\" id=\"sizeInput\" placeholder=\"Small, Medium, Large, Huge\" name=\"size\" value={this.state.size} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"alignmentInput\">Alignment</label>\n                        <input type=\"text\" id=\"alignmentInput\" placeholder=\"Lawful good, neutral evil, ect.\" name=\"alignment\" value={this.state.alignment} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"hpInput\">hp</label>\n                        <input type=\"text\" id=\"hpInput\" placeholder=\"optional: can be done automatically from stats\" name=\"hp\" value={this.state.hp} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"armorInput\">AC</label>\n                        <input type=\"text\" id=\"armorInput\" placeholder=\"12, light armor\" name=\"ac\" value={this.state.ac} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"speedInput\">Speed</label>\n                        <input type=\"text\" id=\"speedInput\" placeholder=\" walk 30 ft., fly 50 ft. \" name=\"speed\" value={this.state.speed} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"nameInput\">Languages</label>\n                        <input type=\"text\" id=\"nameInput\" placeholder=\"Common, Elvish, Abyssal.\" name=\"languages\" value={this.state.languages} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"senseInput\"> Senses </label>\n                        <input type=\"text\" id=\"senseInput\" placeholder=\"Darkvision 60 ft.\" name=\"senses\" value={this.state.senses} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <ChallengeRating state={this.state} value={this.state.stats} sendData={this.getDataFromChallengeRating}></ChallengeRating>\n                <hr></hr>\n                {/* This.handlechange will be executed from within stats each method within needs to use it.  It will be passed the state to update the displayed value.  alternatively, what if Stats had a value prop, which equals state.stats\n                \n                sendData should be child object\n                */}\n                <Stats state={this.state} value={this.state.stats} sendData={this.getDataFromStats}></Stats>\n                <div>\n                    <label>\n                        Saving Throws\n                    </label>\n                    <Saves onChange={this.handleChange} state={this.state} sendData={this.getDataFromSaves}></Saves>\n                </div>\n                <div>\n                    <label>\n                        Skills\n                    </label>\n                    <Skills sendData={this.getDataFromSkills}></Skills>\n                </div>\n                passive Perception calculated by 10+perception(Wis)\n                <div>\n                    <label>\n                        <i className=\"fa fa-fist-raised\" aria-hidden=\"true\"></i>= normal, R= Resistance, I= immunity, V=Vulnerability\n                    </label>\n                    <DamageTypes state={this.state} sendData={this.getDataFromDamageTypes}></DamageTypes>\n                </div>\n                <div>\n                    <label>\n                        Condition Immunities\n                    </label>\n                    <Conditions onChange={this.handleChange} sendData={this.getDataFromConditions}></Conditions>\n                </div>\n                <h3>Traits</h3>\n                <Traits onChange={this.handleChange} state={this.state} sendData={this.getDataFromTraits}></Traits>\n                <h3>Actions</h3>\n                <Actions onChange={this.handleChange} state={this.state} sendData={this.getDataFromActions}></Actions>\n                {/* <div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\"></label>\n                        <textarea className=\"form-control\" name=\"description\" id=\"description\" rows=\"3\" placeholder=\"relevant description here\" ></textarea>\n                        {onChange={this.handleChange} value={this.state.description}}\n                    </div>\n                </div> */}\n                <div className=\"\">\n                    <label htmlFor=\"environmentInput\"> Environment </label>\n                    <input type=\"text\" id=\"senseInput\" placeholder=\"Mountain, hills, etc.\" name=\"environment\" value={this.state.environment} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                </div>\n                <Output state={this.state}></Output>\n            </form>\n        )\n    }\n}\nexport default Form;","import logo from './logo.svg';\nimport Form from './containers/form'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>XML Monster Muncher</h1>\n      </header>\n        <Form></Form>\n      <div>\n        <p className=\"form-text text-muted\">\n          Fill in what is needed for your monster, then copy paste into a txt file ending in .xml with a surrounding tag of compendium.  then import into your favorite combat tracker.  Currently optimized for game master 5.\n        </p>\n      </div>\n      <footer>\n        <a href=\"https://github.com/sbrevolution5/xml-monster-muncher\">Contribute on Github <i className=\"fa fa-github\" aria-hidden=\"true\"></i></a>\n        <p><i className=\"fa fa-copyright\" aria-hidden=\"true\"></i> Seth A. Burleson 2021</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}