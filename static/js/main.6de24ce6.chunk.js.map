{"version":3,"sources":["logo.svg","components/Conditions.js","components/DamageTypes.js","components/Saves.js","components/Skills.js","components/stats.js","components/TraitCard.js","containers/Traits.js","containers/Actions.js","components/ActionCard.js","components/ChallengeRating.js","containers/output.js","containers/form.js","App.js","reportWebVitals.js","index.js"],"names":["Conditions","sendData","useState","blinded","setBlinded","charmed","setCharmed","deafened","setDeafened","exhaustion","setExhaustion","frightened","setFrightened","grappled","setGrappled","incapacitated","setIncapacitated","invisible","setInvisible","paralyzed","setParalyzed","poisoned","setPoisoned","petrified","setPetrified","prone","setProne","restrained","setRestrained","stunned","setStunned","unconscious","setUnconscious","conditionSet","conditionVar","useEffect","className","map","value","index","type","id","onClick","e","target","checked","defaultChecked","htmlFor","DamageTypes","Slashing","Piercing","Bludgeoning","Poison","Acid","Fire","Cold","Radiant","Necrotic","Lightning","Thunder","Force","Psychic","data-toggle","name","autoComplete","aria-hidden","Saves","strSave","setStrSave","dexSave","setDexSave","conSave","setConSave","intSave","setIntSave","wisSave","setWisSave","chaSave","setChaSave","str","dex","con","int","wis","cha","setSave","aria-describedby","placeholder","onChange","Skills","acrobatics","setAcrobatics","animalHandling","setAnimalHandling","arcana","setArcana","athletics","setAthletics","deception","setDeception","history","setHistory","insight","setInsight","intimidation","setIntimidation","investigation","setInvestigation","medicine","setMedicine","nature","setNature","perception","setPerception","performance","setPerformance","persuasion","setPersuasion","religion","setReligion","sleightOfHand","setSlightOfHand","stealth","setStealth","survival","skillSet","Acrobatics","AnimalHandling","Arcana","Athletics","Deception","History","Insight","Intimidation","Investigation","Medicine","Nature","Perception","Performance","Persuasion","Religion","SlightOfHand","Stealth","Survival","Stats","state","setStr","setDex","setCon","setInt","setWis","setCha","scores","scoresArrayMap","defaultValue","parseInt","currentTarget","TraitCard","rows","Component","Traits","Actions","actions","setActions","ChallengeRating","cr","setCr","Output","outputString","stateObject","xmlDocumentString","console","error","size","alignment","ac","hp","speed","stats","saves","skills","senses","passive","languages","log","toXML","class","style","whiteSpace","Form","require","render","props","savingThrows","SleightOfHand","resistances","immunities","vulnerabilities","conditionImmunities","Blinded","Charmed","Deafened","Exhaustion","Frightened","Grappled","Incapacitated","Invisible","Paralyzed","Petrified","Poisoned","Prone","Restrained","Stunned","Unconscious","traits","legendaryActions","description","environment","handleChange","bind","getDataFromStats","getDataFromSaves","getDataFromSkills","getDataFromDamageTypes","getDataFromChallengeRating","getDataFromActions","getDataFromConditions","data","this","setState","event","getDataFromTraits","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4NAAe,I,8DCiDAA,EA9CI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACDC,oBAAS,GADR,mBACxBC,EADwB,KACfC,EADe,OAEDF,oBAAS,GAFR,mBAExBG,EAFwB,KAEfC,EAFe,OAGCJ,oBAAS,GAHV,mBAGxBK,EAHwB,KAGdC,EAHc,OAIKN,oBAAS,GAJd,mBAIxBO,EAJwB,KAIZC,EAJY,OAKKR,oBAAS,GALd,mBAKxBS,EALwB,KAKZC,EALY,OAMCV,oBAAS,GANV,mBAMxBW,EANwB,KAMdC,EANc,OAOWZ,oBAAS,GAPpB,mBAOxBa,EAPwB,KAOTC,EAPS,OAQGd,oBAAS,GARZ,mBAQxBe,EARwB,KAQbC,EARa,OASGhB,oBAAS,GATZ,mBASxBiB,EATwB,KASbC,EATa,OAUClB,oBAAS,GAVV,mBAUxBmB,EAVwB,KAUdC,EAVc,OAWGpB,oBAAS,GAXZ,mBAWxBqB,EAXwB,KAWbC,EAXa,OAYLtB,oBAAS,GAZJ,mBAYxBuB,EAZwB,KAYjBC,EAZiB,OAaKxB,oBAAS,GAbd,oBAaxByB,GAbwB,MAaZC,GAbY,SAcD1B,oBAAS,GAdR,qBAcxB2B,GAdwB,MAcfC,GAde,SAeO5B,oBAAS,GAfhB,qBAexB6B,GAfwB,MAeXC,GAfW,MAqBzBC,GAAe,CAAC7B,EAAYE,EAAYE,EAAaE,EAAeE,EAAeE,EAAaE,EAAkBE,EAAcE,EAAcI,EAAcF,EAAaI,EAAUE,GAAeE,GAAYE,IAC9ME,GAAe,CAAC/B,EAASE,EAASE,EAAUE,EAAYE,EAAYE,EAAUE,EAAeE,EAAWE,EAAWI,EAAWF,EAAUI,EAAOE,GAAYE,GAASE,IAI1K,OAHAI,qBAAU,WALNlC,EAK4B,CAACE,QAASA,EAASE,QAASA,EAASE,SAAUA,EAAUE,WAAYA,EAAYE,WAAYA,EAAYE,SAAUA,EAAUE,cAAeA,EAAeE,UAAWA,EAAWE,UAAWA,EAAWE,SAAUA,EAAUE,UAAWA,EAAWE,MAAOA,EAAOE,WAAYA,GAAYE,QAASA,GAASE,YAAaA,OACnVG,IAGC,qBAAKE,UAAU,MAAf,SAPkB,CAAC,UAAW,UAAW,WAAY,aAAc,aAAc,WAAY,gBAAiB,YAAa,YAAa,YAAa,WAAY,QAAS,aAAc,UAAW,eAQhLC,KAAI,SAACC,EAAOC,GAEvB,OACI,sBAAKH,UAAU,+BAAf,UACI,uBAAOI,KAAK,WAAWJ,UAAU,uBAAuBK,GAAIH,EAAM,MAAOI,QAAS,SAACC,GAAD,OAAOV,GAAaM,GAAOI,EAAEC,OAAOC,UAAWC,eAAgBZ,GAAaK,KAC9J,uBAAOH,UAAU,uBAAuBW,QAAST,EAAM,MAAvD,SAA+DA,MAFhBC,SCiDxDS,EA5EK,WAAO,IAAD,EACc9C,mBAAS,CACzC+C,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,SAAS,IAdS,gCAgBc3D,mBAAS,CACzC+C,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,SAAS,KA7BS,gCA+BU3D,mBAAS,CACrC+C,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,SAAS,KA5CS,6BA+CtB,OACI,qBAAKzB,UAAU,iBAAf,SAFa,CAAC,WAAY,WAAY,cAAe,SAAU,OAAQ,OAAQ,OAAQ,UAAW,WAAY,YAAa,UAAW,QAAS,WAGjIC,KAAI,SAACC,EAAOC,GAClB,OACI,sBAAKH,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAmBW,QAAST,EAAQ,MAArD,SACKA,IAEL,sBAAKF,UAAU,6BAA6B0B,cAAY,UAAxD,UACI,wBAAO1B,UAAU,2BAAjB,UACI,uBAAOI,KAAK,QAAQuB,KAAK,UAAUtB,GAAG,SAASuB,aAAa,MAAMlB,gBAAc,IADpF,IACwF,mBAAGV,UAAU,oBAAoB6B,cAAY,YAErI,wBAAO7B,UAAU,gCAAjB,UACI,uBAAOI,KAAK,QAAQuB,KAAK,UAAUtB,GAAG,YAAYuB,aAAa,QADnE,QAGA,wBAAO5B,UAAU,+BAAjB,UACI,uBAAOI,KAAK,QAAQuB,KAAK,UAAUtB,GAAG,UAAUuB,aAAa,QADjE,QAGA,wBAAO5B,UAAU,6BAAjB,UACI,uBAAOI,KAAK,QAAQuB,KAAK,UAAUtB,GAAG,UAAUuB,aAAa,QADjE,aAdyBzB,SCvBtC2B,EAjCD,SAAC,GAAgB,IAAfjE,EAAc,EAAdA,SAAc,EAEEC,mBAAS,IAFX,mBAErBiE,EAFqB,KAEZC,EAFY,OAGElE,mBAAS,IAHX,mBAGrBmE,EAHqB,KAGZC,EAHY,OAIEpE,mBAAS,IAJX,mBAIrBqE,EAJqB,KAIZC,EAJY,OAKEtE,mBAAS,IALX,mBAKrBuE,EALqB,KAKZC,EALY,OAMExE,mBAAS,IANX,mBAMrByE,EANqB,KAMZC,EANY,OAOE1E,mBAAS,IAPX,mBAOrB2E,EAPqB,KAOZC,EAPY,KAW5B3C,qBAAU,WAFRlC,EAE4B,CAAC8E,IAAKZ,EAASa,IAAIX,EAASY,IAAKV,EAASW,IAAKT,EAASU,IAAKR,EAASS,IAAKP,MAAW,CAACV,EAASE,EAASE,EAASE,EAASE,EAASE,IAClK,IAAMQ,EAAU,CAACjB,EAAYE,EAAYE,EAAYF,EAAYI,EAAYE,EAAYE,GACzF,OACE,qBAAK1C,UAAU,iBAAf,SAbiB,CAAC,WAAY,YAAa,eAAgB,eAAgB,SAAU,YAcvEC,KAAI,SAACC,EAAOC,GAEtB,OACE,sBAAKH,UAAU,aAAf,UACE,uBAAOA,UAAU,mBAAmBW,QAAST,EAAQ,MAArD,SACGA,IAEH,sBAAKF,UAAU,aAAf,UACE,uBAAOW,QAAST,EAAQ,QACxB,uBAAOE,KAAK,OAAOJ,UAAU,kCAAkC2B,KAAK,GAAGtB,GAAIH,EAAQ,MAAOgD,mBAAiB,SAASC,YAAY,KAAKC,SAAU,SAAA7C,GAAC,OAAE0C,EAAQ9C,GAAOI,EAAEC,OAAON,UAC1K,uBAAOG,GAAG,SAASL,UAAU,uBAA7B,oCAP6BG,SC8B5BkD,EAjDD,SAAC,GAAc,IAAbxF,EAAY,EAAZA,SAAY,EAEYC,mBAAS,IAFrB,mBAEjBwF,EAFiB,KAELC,EAFK,OAGoBzF,mBAAS,IAH7B,mBAGjB0F,EAHiB,KAGDC,EAHC,OAII3F,mBAAS,IAJb,mBAIjB4F,EAJiB,KAITC,EAJS,OAKU7F,mBAAS,IALnB,mBAKjB8F,EALiB,KAKNC,EALM,OAMU/F,mBAAS,IANnB,mBAMjBgG,EANiB,KAMNC,EANM,OAOMjG,mBAAS,IAPf,mBAOjBkG,EAPiB,KAORC,EAPQ,OAQMnG,mBAAS,IARf,mBAQjBoG,EARiB,KAQRC,EARQ,OASgBrG,mBAAS,IATzB,mBASjBsG,EATiB,KASHC,EATG,OAUkBvG,mBAAS,IAV3B,mBAUjBwG,EAViB,KAUFC,EAVE,OAWQzG,mBAAS,IAXjB,mBAWjB0G,EAXiB,KAWPC,EAXO,OAYI3G,mBAAS,IAZb,mBAYjB4G,EAZiB,KAYTC,EAZS,OAaY7G,mBAAS,IAbrB,mBAajB8G,EAbiB,KAaLC,EAbK,OAcc/G,mBAAS,IAdvB,oBAcjBgH,GAdiB,MAcJC,GAdI,SAeYjH,mBAAS,IAfrB,qBAejBkH,GAfiB,MAeLC,GAfK,SAgBQnH,mBAAS,IAhBjB,qBAgBjBoH,GAhBiB,MAgBPC,GAhBO,SAiBiBrH,mBAAS,IAjB1B,qBAiBjBsH,GAjBiB,MAiBFC,GAjBE,SAkBMvH,mBAAS,IAlBf,qBAkBjBwH,GAlBiB,MAkBRC,GAlBQ,SAmBQzH,mBAAS,IAnBjB,qBAmBjB0H,GAnBiB,MAsBlBC,GAAW,CAAClC,EAAeE,EAAmBE,EAAWE,EAAcE,EAAcE,EAAYE,EAAYE,EAAiBE,EAAkBE,EAAaE,EAAWE,EAAeE,GAAgBE,GAAeE,GAAaE,GAAiBE,GAtBlO,OA2BxB,OADAxF,qBAAU,WAFNlC,EAE0B,CAAC6H,WAAYpC,EAAYqC,eAAgBnC,EAAgBoC,OAAQlC,EAAQmC,UAAWjC,EAAWkC,UAAWhC,EAAWiC,QAAS/B,EAASgC,QAAS9B,EAAS+B,aAAc7B,EAAc8B,cAAe5B,EAAe6B,SAAU3B,EAAU4B,OAAQ1B,EAAQ2B,WAAYzB,EAAY0B,YAAaxB,GAAayB,WAAYvB,GAAYwB,SAAUtB,GAAUuB,aAAcrB,GAAesB,QAASpB,GAASqB,SAAUnB,OAAY,CAAClC,EAAYE,EAAgBE,EAAQE,EAAWE,EAAWE,EAASE,EAASE,EAAcE,EAAeE,EAAUE,EAAQE,EAAYE,GAAaE,GAAYE,GAAUE,GAAeE,GAASE,KAEvnB,8BAPc,CAAC,aAAc,iBAAkB,SAAU,YAAa,YAAa,UAAW,UAAW,eAAgB,gBAAiB,WAAY,SAAU,aAAc,cAAe,aAAc,WAAY,eAAgB,UAAW,YAQnOvF,KAAI,SAACC,EAAMC,GAElB,OACI,qBAAKH,UAAU,+BAAf,SAGQ,sBAAKA,UAAU,sBAAf,UACI,sBAAMA,UAAU,mBAAmBW,QAAST,EAAQ,MAApD,SACKA,IAEL,uBAAOE,KAAK,OAAOJ,UAAU,2CAA2C2B,KAAK,GAAGtB,GAAIH,EAAM,MAAOgD,mBAAiB,SAASC,YAAY,eAAeC,SAAU,SAAA7C,GAAC,OAAEkF,GAAStF,GAAOI,EAAEC,OAAON,cAPrJC,SC0BxDyG,EAxDF,SAAC,GAA8B,EAA7BxD,SAA6B,EAAnByD,MAAoB,IAAbhJ,EAAY,EAAZA,SAAY,EAMlBC,mBAAS,IANS,mBAMjC6E,EANiC,KAM5BmE,EAN4B,OAOlBhJ,mBAAS,IAPS,mBAOjC8E,EAPiC,KAO5BmE,EAP4B,OAQlBjJ,mBAAS,IARS,mBAQjC+E,EARiC,KAQ5BmE,EAR4B,OASlBlJ,mBAAS,IATS,mBASjCgF,EATiC,KAS5BmE,EAT4B,OAUlBnJ,mBAAS,IAVS,mBAUjCiF,EAViC,KAU5BmE,EAV4B,OAWlBpJ,mBAAS,IAXS,mBAWjCkF,EAXiC,KAW5BmE,EAX4B,KAYlCC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC9FrH,qBAAU,WAVNlC,EAU0B,CAAC8E,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,MAAO,CAACL,EAAKC,EAAIC,EAAIC,EAAIC,EAAIC,IAEnH,IAAMqE,EAAgB,WAAK,OACvBD,EAAOnH,KAAI,SAACC,EAAOC,GACnB,OAAO,wBAAoBD,MAAOA,EAA3B,SAAmCA,GAAtBC,OAExB,OAEQ,sBAAKH,UAAU,aAAf,UACA,uCACI,uBAAOW,QAAQ,cAAf,sBACA,wBAAQN,GAAG,cAAciH,aAAa,KAAK3F,KAAK,UAAUyB,SAAU,SAAA7C,GAAC,OAAIuG,EAAOS,SAAShH,EAAEiH,cAActH,SAAzG,SACKmH,MAGL,uBAAO1G,QAAQ,cAAf,wBACA,wBAAQN,GAAG,cAAciH,aAAa,KAAK3F,KAAK,UAAUyB,SAAU,SAAA7C,GAAC,OAAIwG,EAAOQ,SAAShH,EAAEiH,cAActH,SAAzG,SACKmH,MAGL,uBAAO1G,QAAQ,cAAf,2BACA,wBAAQN,GAAG,cAAciH,aAAa,KAAK3F,KAAK,UAAUyB,SAAU,SAAA7C,GAAC,OAAIyG,EAAOO,SAAShH,EAAEiH,cAActH,SAAzG,SACKmH,MAGL,uBAAO1G,QAAQ,cAAf,2BACA,wBAAQN,GAAG,cAAciH,aAAa,KAAK3F,KAAK,UAAUyB,SAAU,SAAA7C,GAAC,OAAI0G,EAAOM,SAAShH,EAAEiH,cAActH,SAAzG,SACKmH,MAGL,uBAAO1G,QAAQ,cAAf,qBACA,wBAAQN,GAAG,cAAciH,aAAa,KAAK3F,KAAK,UAAUyB,SAAU,SAAA7C,GAAC,OAAI2G,EAAOK,SAAShH,EAAEiH,cAActH,SAAzG,SACKmH,MAGL,uBAAO1G,QAAQ,cAAf,uBACA,wBAAQN,GAAG,cAAciH,aAAa,KAAK3F,KAAK,UAAUyB,SAAU,SAAA7C,GAAC,OAAI4G,EAAOI,SAAShH,EAAEiH,cAActH,SAAzG,SACKmH,UC3BNI,E,4JAvBX,WACI,OACI,8BAEI,sBAAKzH,UAAU,8CAAf,UACI,qBAAKA,UAAU,cAAf,wBACA,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBAAOW,QAAQ,eACf,uBAAOP,KAAK,OAAOJ,UAAU,uBAAuB2B,KAAK,QAAQtB,GAAG,aAAa6C,mBAAiB,SAASC,YAAY,KACvH,uBAAO9C,GAAG,SAASL,UAAU,uBAA7B,8BAEJ,sBAAKA,UAAU,aAAf,UACI,uBAAOW,QAAQ,qBACf,0BAAUX,UAAU,uBAAuB2B,KAAK,cAActB,GAAG,mBAAmB8C,YAAY,sBAAsBuE,KAAK,SAE/H,wBAAQtH,KAAK,SAASJ,UAAU,iBAAhC,sC,GAjBA2H,aCCHC,E,4JAGjB,WACI,OACA,gCACI,wBAAQxH,KAAK,SAASJ,UAAU,kBAAhC,uBAEA,cAAC,EAAD,W,GARwB2H,a,SCkBrBE,GCpByBF,YDC1B,SAAC,GAAe,IAAd9J,EAAa,EAAbA,SAAa,EACKC,mBAAS,CAAC,KADf,mBAClBgK,EADkB,KACTC,EADS,KAUzB,OAFAhI,qBAAU,WAFNlC,EAE0BiK,KAAW,CAACA,IAGtC,gCACI,wBAAQ1H,KAAK,SAASJ,UAAU,kBAAkBM,QAVrC,WACjByH,EAAW,GAAD,mBAAKD,GAAL,CAAc,OASpB,wBACKA,EAAQ7H,KAAI,SAACC,EAAOC,YEItB6H,EAlBS,SAAC,GAAc,IAAbnK,EAAY,EAAZA,SAAY,EACdC,mBAAS,IADK,mBAC3BmK,EAD2B,KACvBC,EADuB,KAOlC,OADAnI,qBAAU,WAFNlC,EAE0BoK,KAAM,CAACA,IAEjC,sBAAKjI,UAAU,aAAf,UACE,uBAAOW,QAAQ,SAAf,8BACA,wBAAQX,UAAU,kCAAkC2B,KAAK,GAAGtB,GAAG,SAAS+C,SAAU,SAAA7C,GAAI2H,EAAM3H,EAAEC,OAAON,QAArG,SARM,CAAC,IAAK,MAAO,MAAO,MAAO,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAS/LD,KAAI,SAACC,EAAOC,GACb,OAAO,wBAAoBD,MAAOA,EAA3B,SAAmCA,GAAtBC,YC0ErBgI,EAVA,SAAC,GAAe,IACrBC,EA5EI,SAACC,GACX,IAAIC,EAAoB,GAsExB,OArEAA,GAAqB,cACjBD,EAAY1G,KACZ2G,GAAqB,SAAWD,EAAY1G,KAAO,YAEnD4G,QAAQC,MAAM,iBAEdH,EAAYI,OACZH,GAAqB,SAAWD,EAAYI,KAAO,aAEnDJ,EAAYjI,OACZkI,GAAqB,SAAWD,EAAYjI,KAAO,aAEnDiI,EAAYK,YACZJ,GAAqB,cAAgBD,EAAYK,UAAY,kBAE7DL,EAAYM,KACZL,GAAqB,OAASD,EAAYM,GAAK,WAE/CN,EAAYO,KACZN,GAAqB,OAASD,EAAYO,GAAK,WAE/CP,EAAYQ,QACZP,GAAqB,UAAYD,EAAYQ,MAAQ,cAErDR,EAAYS,MAAMnG,MAClB2F,GAAqB,QAAUD,EAAYS,MAAMnG,IAAM,YAEvD0F,EAAYS,MAAMlG,MAClB0F,GAAqB,QAAUD,EAAYS,MAAMlG,IAAM,YAEvDyF,EAAYS,MAAMjG,MAClByF,GAAqB,QAAUD,EAAYS,MAAMjG,IAAM,YAEvDwF,EAAYS,MAAMhG,MAClBwF,GAAqB,QAAUD,EAAYS,MAAMhG,IAAM,YAEvDuF,EAAYS,MAAM/F,MAClBuF,GAAqB,QAAUD,EAAYS,MAAM/F,IAAM,YAEvDsF,EAAYS,MAAM9F,MAClBsF,GAAqB,QAAUD,EAAYS,MAAM9F,IAAM,YAIvDqF,EAAYU,QACZT,GAAqB,UAAYD,EAAYU,MAAQ,cAGrDV,EAAYW,SACZV,GAAqB,WAAaD,EAAYW,OAAS,eAIvDX,EAAYY,SACZX,GAAqB,WAAaD,EAAYY,OAAS,eAEvDZ,EAAYa,UACZZ,GAAqB,YAAcD,EAAYa,QAAU,gBAEzDb,EAAYc,YACZb,GAAqB,cAAgBD,EAAYc,UAAY,kBAE7Dd,EAAYJ,KACZK,GAAqB,OAASD,EAAYJ,GAAK,WAInDK,GAAqB,aACrBC,QAAQa,IAAId,GACLA,EAKce,CADK,EAAZxC,OAEd,OACQ,sBAAKyC,MAAM,+BAAX,UACI,oBAAIA,MAAM,YAAV,qBACA,mBAAGC,MAAO,CAACC,WAAY,YAAvB,SAAqCpB,QCmMtCqB,GA5QIC,EAAQ,KAAnBC,O,kDAIJ,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACD/C,MAAQ,CACTlF,KAAM,GACNvB,KAAM,GACN0I,MAAO,CACHnG,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAET4F,GAAI,GACJD,GAAI,GACJQ,UAAW,GACXV,KAAM,GACNC,UAAW,GACXG,MAAO,GACPZ,GAAI,GACJgB,OAAQ,GACRC,QAAS,GACTW,aAAc,CACVlH,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAETgG,OAAQ,CACJnD,UAAW,GACXH,WAAY,GACZoE,cAAe,GACfpD,QAAS,GACTd,OAAQ,GACRG,QAAS,GACTG,cAAe,GACfE,OAAQ,GACRI,SAAU,GACVb,eAAgB,GAChBK,QAAS,GACTG,SAAU,GACVE,WAAY,GACZM,SAAU,GACVb,UAAW,GACXG,aAAc,GACdK,YAAa,GACbC,WAAY,IAEhBwD,YAAa,CACTlJ,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,SAAS,GAEbuI,WAAY,CACRnJ,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,SAAS,GAEbwI,gBAAiB,CACbpJ,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,SAAS,GAEbyI,oBAAqB,CACjBC,SAAS,EACTC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,UAAU,EACVC,eAAe,EACfC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,aAAa,GAGjBC,OAAQ,GACRpD,QAAS,GACTqD,iBAAkB,GAClBC,YAAa,GACbC,YAAa,IAIjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAK5B,OAAS,EAAKA,OAAO4B,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBACzB,EAAKI,uBAAyB,EAAKA,uBAAuBJ,KAA5B,gBAC9B,EAAKK,2BAA6B,EAAKA,2BAA2BL,KAAhC,gBAClC,EAAKM,mBAAqB,EAAKA,mBAAmBN,KAAxB,gBAC1B,EAAKO,sBAAwB,EAAKA,sBAAsBP,KAA3B,gBAjId,E,oDAoInB,SAAiBQ,GACbC,KAAKC,SAAS,CAACnD,MAAOiD,M,8BAE1B,SAAiBA,GACbC,KAAKC,SAAS,CAACpC,aAAckC,M,+BAEjC,SAAkBA,GACdC,KAAKC,SAAS,CAACjD,OAAQ+C,M,oCAE3B,SAAuBA,GAEnBC,KAAKC,SAAS,CAAClC,YAAagC,EAAK,GAAI/B,WAAY+B,EAAK,GAAI9B,gBAAiB8B,EAAK,O,wCAEpF,SAA2BA,GACvBC,KAAKC,SAAS,CAAChE,GAAI8D,M,gCAEvB,SAAmBA,GAEfC,KAAKC,SAAS,CAACnE,QAASiE,M,+BAE5B,SAAkBA,GAEdC,KAAKC,SAAS,CAACf,OAAQa,M,mCAE3B,SAAsBA,GAClBC,KAAKC,SAAS,CAAC/B,oBAAqB6B,M,0BAGxC,SAAaG,GACT,IAAM1L,EAAS0L,EAAM1L,OACfN,EAAwB,aAAhBM,EAAOJ,KAAsBI,EAAOC,QAAUD,EAAON,MAC7DyB,EAAOnB,EAAOmB,KACpBqK,KAAKC,SAAL,eAAiBtK,EAAOzB,M,oBAG5B,WACI,OACI,iCACI,sBAAKF,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,kBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY8C,YAAY,gBAAgBxB,KAAK,OAAOzB,MAAO8L,KAAKnF,MAAMlF,KAAMyB,SAAU4I,KAAKV,aAActL,UAAU,wCAE7I,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,kBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY8C,YAAY,6BAA6BxB,KAAK,OAAOzB,MAAO8L,KAAKnF,MAAMzG,KAAMgD,SAAU4I,KAAKV,aAActL,UAAU,uCAE1J,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,kBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY8C,YAAY,6BAA6BxB,KAAK,OAAOzB,MAAO8L,KAAKnF,MAAM4B,KAAMrF,SAAU4I,KAAKV,aAActL,UAAU,0CAG9J,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,iBAAf,uBACA,uBAAOP,KAAK,OAAOC,GAAG,iBAAiB8C,YAAY,kCAAkCxB,KAAK,YAAYzB,MAAO8L,KAAKnF,MAAM6B,UAAWtF,SAAU4I,KAAKV,aAActL,UAAU,uCAE9K,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,UAAf,gBACA,uBAAOP,KAAK,OAAOC,GAAG,UAAU8C,YAAY,iDAAiDxB,KAAK,KAAKzB,MAAO8L,KAAKnF,MAAM+B,GAAIxF,SAAU4I,KAAKV,aAActL,UAAU,uCAExK,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,aAAf,gBACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa8C,YAAY,kBAAkBxB,KAAK,KAAKzB,MAAO8L,KAAKnF,MAAM8B,GAAIvF,SAAU4I,KAAKV,aAActL,UAAU,0CAGhJ,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,aAAf,mBACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa8C,YAAY,4BAA4BxB,KAAK,QAAQzB,MAAO8L,KAAKnF,MAAMgC,MAAOzF,SAAU4I,KAAKV,aAActL,UAAU,uCAE5J,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,YAAf,uBACA,uBAAOP,KAAK,OAAOC,GAAG,YAAY8C,YAAY,2BAA2BxB,KAAK,YAAYzB,MAAO8L,KAAKnF,MAAMsC,UAAW/F,SAAU4I,KAAKV,aAActL,UAAU,uCAElK,sBAAKA,UAAU,WAAf,UACI,uBAAOW,QAAQ,aAAf,sBACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa8C,YAAY,oBAAoBxB,KAAK,SAASzB,MAAO8L,KAAKnF,MAAMoC,OAAQ7F,SAAU4I,KAAKV,aAActL,UAAU,0CAG1J,cAAC,EAAD,CAAiB6G,MAAOmF,KAAKnF,MAAO3G,MAAO8L,KAAKnF,MAAMiC,MAAOjL,SAAUmO,KAAKJ,6BAC5E,uBAKA,cAAC,EAAD,CAAO/E,MAAOmF,KAAKnF,MAAO3G,MAAO8L,KAAKnF,MAAMiC,MAAOjL,SAAUmO,KAAKR,mBAClE,gCACI,kDAGA,cAAC,EAAD,CAAOpI,SAAU4I,KAAKV,aAAczE,MAAOmF,KAAKnF,MAAOhJ,SAAUmO,KAAKP,sBAE1E,gCACI,2CAGA,cAAC,EAAD,CAAQ5N,SAAUmO,KAAKN,uBA5D/B,sDA+DI,gCACI,kCACI,mBAAG1L,UAAU,oBAAoB6B,cAAY,SADjD,2DAGA,cAAC,EAAD,CAAagF,MAAOmF,KAAKnF,WAE7B,gCACI,yDAGA,cAAC,EAAD,CAAYzD,SAAU4I,KAAKV,aAAczN,SAAUmO,KAAKF,2BAE5D,wCACA,cAAC,EAAD,CAAQ1I,SAAU4I,KAAKV,aAAczE,MAAOmF,KAAKnF,MAAOhJ,SAAUmO,KAAKG,oBACvE,yCACA,cAAC,EAAD,CAAS/I,SAAU4I,KAAKV,aAAczE,MAAOmF,KAAKnF,MAAOhJ,SAAUmO,KAAKH,qBAQxE,sBAAK7L,UAAU,GAAf,UACI,uBAAOW,QAAQ,mBAAf,2BACA,uBAAOP,KAAK,OAAOC,GAAG,aAAa8C,YAAY,wBAAwBxB,KAAK,cAAczB,MAAO8L,KAAKnF,MAAMwE,YAAajI,SAAU4I,KAAKV,aAActL,UAAU,uCAEpK,cAAC,EAAD,CAAQ6G,MAAOmF,KAAKnF,e,GAtQd6C,EAAQ,GAAtB/B,Y,OCSOyE,MAff,WACE,OACE,sBAAKpM,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,uDAEA,cAAC,EAAD,IACF,mCACE,oBAAGqM,KAAK,uDAAR,kCAAoF,mBAAGrM,UAAU,eAAe6B,cAAY,YAC5H,8BAAG,mBAAG7B,UAAU,kBAAkB6B,cAAY,SAA9C,mCCDOyK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASpD,OACP,cAAC,IAAMqD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6de24ce6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component, useState, useEffect} from \"react\";\n\n// should be collapsable, with a number to show how many conditions are checked while it is collapsed. \nconst Conditions = ({sendData}) => {\n    const [blinded, setBlinded] = useState(false)\n    const [charmed, setCharmed] = useState(false)\n    const [deafened, setDeafened] = useState(false)\n    const [exhaustion, setExhaustion] = useState(false)\n    const [frightened, setFrightened] = useState(false)\n    const [grappled, setGrappled] = useState(false)\n    const [incapacitated, setIncapacitated] = useState(false)\n    const [invisible, setInvisible] = useState(false)\n    const [paralyzed, setParalyzed] = useState(false)\n    const [poisoned, setPoisoned] = useState(false)\n    const [petrified, setPetrified] = useState(false)\n    const [prone, setProne] = useState(false)\n    const [restrained, setRestrained] = useState(false)\n    const [stunned, setStunned] = useState(false)\n    const [unconscious, setUnconscious] = useState(false)\n\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n    const conditionList = [\"Blinded\", \"Charmed\", \"Deafened\", \"Exhaustion\", \"Frightened\", \"Grappled\", \"Incapacitated\", \"Invisible\", \"Paralyzed\", \"Petrified\", \"Poisoned\", \"Prone\", \"Restrained\", \"Stunned\", \"Unconscious\",]\n    const conditionSet = [setBlinded, setCharmed, setDeafened, setExhaustion, setFrightened, setGrappled, setIncapacitated, setInvisible, setParalyzed, setPetrified, setPoisoned, setProne, setRestrained, setStunned, setUnconscious]\n    const conditionVar = [blinded, charmed, deafened, exhaustion, frightened, grappled, incapacitated, invisible, paralyzed, petrified, poisoned, prone, restrained, stunned, unconscious]\n    useEffect(() => {callBackMethod({blinded: blinded, charmed: charmed, deafened: deafened, exhaustion: exhaustion, frightened: frightened, grappled: grappled, incapacitated: incapacitated, invisible: invisible, paralyzed: paralyzed, poisoned: poisoned, petrified: petrified, prone: prone, restrained: restrained, stunned: stunned, unconscious: unconscious})\n    }, conditionVar)\n\n    return (\n        <div className=\"row\">\n            {conditionList.map((value, index) => {\n                //buttons need to be toggleable!\n                return (\n                    <div className=\"custom-control custom-switch\" key={index}>\n                        <input type=\"checkbox\" className=\"custom-control-input\" id={value+\"Btn\"} onClick={(e) => conditionSet[index](e.target.checked)}  defaultChecked={conditionVar[index]}></input>\n                        <label className=\"custom-control-label\" htmlFor={value+\"Btn\"}>{value}</label>\n                    </div>\n                    // <div className=\"form-group-btn\" key={index}>\n                    //     <button type=\"button\" className=\"btn btn-toggle btn-secondary\" data-toggle={conditionVar[index]} name=\"\" id={value + \"Btn\"} value={conditionVar[index]} onClick={(e) => conditionSet[index](!e.target.value)}>\n                    //         {value}\n                    //     </button>\n                    // </div>\n                )\n            }\n            )}\n        </div>\n    )\n}\nexport default Conditions","//used to denote all available damage types, for immunity/vulnerability/resistance\n//should this be one section with 3 checkboxes for each type?  alternative takes up a lot of space.  \n//currently only one box per type\n\n//sending back array of 3 objects,\nimport React, { useState } from 'react'\n\nconst DamageTypes = () => {\n    const [vulnerable, setVulnerable] = useState({\n        Slashing: false,\n        Piercing: false,\n        Bludgeoning: false,\n        Poison: false,\n        Acid: false,\n        Fire: false,\n        Cold: false,\n        Radiant: false,\n        Necrotic: false,\n        Lightning: false,\n        Thunder: false,\n        Force: false,\n        Psychic: false,\n    })\n    const [resistance, setResistance] = useState({\n        Slashing: false,\n        Piercing: false,\n        Bludgeoning: false,\n        Poison: false,\n        Acid: false,\n        Fire: false,\n        Cold: false,\n        Radiant: false,\n        Necrotic: false,\n        Lightning: false,\n        Thunder: false,\n        Force: false,\n        Psychic: false,\n    })\n    const [immunity, setImmunity] = useState({\n        Slashing: false,\n        Piercing: false,\n        Bludgeoning: false,\n        Poison: false,\n        Acid: false,\n        Fire: false,\n        Cold: false,\n        Radiant: false,\n        Necrotic: false,\n        Lightning: false,\n        Thunder: false,\n        Force: false,\n        Psychic: false,\n    })\n    const typeList = [\"Slashing\", \"Piercing\", \"Bludgeoning\", \"Poison\", \"Acid\", \"Fire\", \"Cold\", \"Radiant\", \"Necrotic\", \"Lightning\", \"Thunder\", \"Force\", \"Psychic\"];\n    return (\n        <div className=\"form-group row\">\n            {typeList.map((value, index) => {\n                return (\n                    <div className=\"form-check\" key={index}>\n                        <label className=\"form-check-label\" htmlFor={value + \"Box\"}>\n                            {value}\n                        </label>\n                        <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                            <label className=\"btn btn-secondary active\">\n                                <input type=\"radio\" name=\"options\" id=\"normal\" autoComplete=\"off\" defaultChecked /> <i className=\"fa fa-fist-raised\" aria-hidden=\"true\"></i>\n                            </label>\n                            <label className=\"btn btn-secondary btn-warning\">\n                                <input type=\"radio\" name=\"options\" id=\"resistant\" autoComplete=\"off\" /> R\n                                </label>\n                            <label className=\"btn btn-secondary btn-danger\">\n                                <input type=\"radio\" name=\"options\" id=\"option3\" autoComplete=\"off\" /> I\n                                </label>\n                            <label className=\"btn btn-secondary btn-info\">\n                                <input type=\"radio\" name=\"options\" id=\"option4\" autoComplete=\"off\" /> V\n                                </label>\n                        </div>\n\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\nexport default DamageTypes","import React, { Component, useState, useEffect } from 'react';\n\nconst Saves = ({sendData}) => {\n  const saveThrows = [\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"]\n  const [strSave, setStrSave] = useState(\"\")\n  const [dexSave, setDexSave] = useState(\"\")\n  const [conSave, setConSave] = useState(\"\")\n  const [intSave, setIntSave] = useState(\"\")\n  const [wisSave, setWisSave] = useState(\"\")\n  const [chaSave, setChaSave] = useState(\"\")\n  const callBackMethod=(value)=>{\n    sendData(value);\n  }   \n  useEffect(()=>{callBackMethod({str: strSave, dex:dexSave, con: conSave, int: intSave, wis: wisSave, cha: chaSave})},[strSave, dexSave, conSave, intSave, wisSave, chaSave])\n  const setSave = [setStrSave, setDexSave, setConSave, setDexSave, setIntSave, setWisSave, setChaSave];\n  return (\n    <div className=\"form-group row\">\n      {saveThrows.map((value, index) => {\n        //no check boxes, empty box means no change from base stats\n        return (\n          <div className=\"form-check\" key={index}>\n            <label className=\"form-check-label\" htmlFor={value + \"Box\"}>\n              {value}\n            </label>\n            <div className=\"form-group\">\n              <label htmlFor={value + \"Mod\"}></label>\n              <input type=\"text\" className=\"form-control bg-dark text-light\" name=\"\" id={value + \"Mod\"} aria-describedby=\"helpId\" placeholder=\"+0\" onChange={e=>setSave[index](e.target.value)}/>\n              <small id=\"helpId\" className=\"form-text text-muted\">Mod value, ex. +4</small>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\nexport default Saves;","import React, {Component, useState, useEffect} from 'react';\nconst Skills =({sendData})=>{\n\n    const [acrobatics, setAcrobatics] = useState(\"\");\n    const [animalHandling, setAnimalHandling] = useState(\"\");\n    const [arcana, setArcana] = useState(\"\");\n    const [athletics, setAthletics] = useState(\"\");\n    const [deception, setDeception] = useState(\"\");\n    const [history, setHistory] = useState(\"\");\n    const [insight, setInsight] = useState(\"\");\n    const [intimidation, setIntimidation] = useState(\"\");\n    const [investigation, setInvestigation] = useState(\"\");\n    const [medicine, setMedicine] = useState(\"\");\n    const [nature, setNature] = useState(\"\");\n    const [perception, setPerception] = useState(\"\");\n    const [performance, setPerformance] = useState(\"\");\n    const [persuasion, setPersuasion] = useState(\"\");\n    const [religion, setReligion] = useState(\"\");\n    const [sleightOfHand, setSlightOfHand] = useState(\"\");\n    const [stealth, setStealth] = useState(\"\");\n    const [survival, setSurvival] = useState(\"\");\n\n    const skillList = [\"Acrobatics\", \"AnimalHandling\", \"Arcana\", \"Athletics\", \"Deception\", \"History\", \"Insight\", \"Intimidation\", \"Investigation\", \"Medicine\", \"Nature\", \"Perception\", \"Performance\", \"Persuasion\", \"Religion\", \"SlightOfHand\", \"Stealth\", \"Survival\"]\n    const skillSet = [setAcrobatics, setAnimalHandling, setArcana, setAthletics, setDeception, setHistory, setInsight, setIntimidation, setInvestigation, setMedicine, setNature, setPerception, setPerformance, setPersuasion, setReligion, setSlightOfHand, setStealth, setSurvival]\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n    useEffect(()=>{callBackMethod({Acrobatics: acrobatics, AnimalHandling: animalHandling, Arcana: arcana, Athletics: athletics, Deception: deception, History: history, Insight: insight, Intimidation: intimidation, Investigation: investigation, Medicine: medicine, Nature: nature, Perception: perception, Performance: performance, Persuasion: persuasion, Religion: religion, SlightOfHand: sleightOfHand, Stealth: stealth, Survival: survival})},[acrobatics, animalHandling, arcana, athletics, deception, history, insight, intimidation, investigation, medicine, nature, perception, performance, persuasion, religion, sleightOfHand, stealth, survival])\n    return(\n        <div>\n            {skillList.map((value,index)=>{\n                //does this need a checkbox? lets remove for now\n                return(\n                    <div className=\"form-check-inline form-group\" key={index}>\n                        {/* <div className=\"form-check row col-sm-12\">\n                            <input type=\"checkbox\" className=\"form-check-input col-sm-6\" name=\"\" id={value + \"Box\"} value=\"checkedValue\" /> */}\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\" htmlFor={value + \"Box\"}>\n                                    {value}\n                                </span>\n                                <input type=\"text\" className=\"form-control col-xs-1 bg-dark text-light\" name=\"\" id={value+\"Mod\"} aria-describedby=\"helpId\" placeholder=\"+0 (default)\" onChange={e=>skillSet[index](e.target.value)}/>\n                            </div>\n                        </div>\n                    // </div>\n                )\n            })}\n        </div>\n    )\n\n}\nexport default Skills","\nimport {useState, useEffect, Component} from 'react';\n\nconst Stats =({onChange, state, sendData})=>{\n    //should be able to send the object to parent needs to trigger when state is changed, so that the parent recieves value\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n\n    const [str, setStr] = useState(10);\n    const [dex, setDex] = useState(10);\n    const [con, setCon] = useState(10);\n    const [int, setInt] = useState(10);\n    const [wis, setWis] = useState(10);\n    const [cha, setCha] = useState(10);\n    const scores = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n    useEffect(()=>{callBackMethod({str: str, dex: dex, con: con, int: int, wis: wis, cha: cha})},[str, dex,con,int,wis,cha])\n    // attempting to stop repeating self\n    const scoresArrayMap =()=>{return(\n        scores.map((value, index) => {\n        return <option key={index} value={value}>{value}</option>\n    }))}\n    return(\n\n            <div className=\"form-group\">\n            <h3>Stats</h3>\n                <label htmlFor=\"strSelector\">Strength</label>\n                <select id=\"strSelector\" defaultValue=\"10\" name=\"strStat\" onChange={e => setStr(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"dexSelector\"> Dexterity</label>\n                <select id=\"dexSelector\" defaultValue=\"10\" name=\"dexStat\" onChange={e => setDex(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"conSelector\"> Constitution</label>\n                <select id=\"conSelector\" defaultValue=\"10\" name=\"conStat\" onChange={e => setCon(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"intSelector\"> Intelligence</label>\n                <select id=\"intSelector\" defaultValue=\"10\" name=\"intStat\" onChange={e => setInt(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"wisSelector\"> Wisdom</label>\n                <select id=\"wisSelector\" defaultValue=\"10\" name=\"wisStat\" onChange={e => setWis(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n                <label htmlFor=\"chaSelector\"> Charisma</label>\n                <select id=\"chaSelector\" defaultValue=\"10\" name=\"chaStat\" onChange={e => setCha(parseInt(e.currentTarget.value))}>\n                    {scoresArrayMap()}\n\n                </select>\n        </div>\n    )\n}\nexport default Stats","import { Component } from \"react\";\n\nclass TraitCard extends Component {\n    render() {\n        return (\n            <div>\n                {/* remove buton for each card  */}\n                <div className=\"card text-white bg-dark mb-3 d-inline-block\" >\n                    <div className=\"card-header\">Trait Card</div>\n                    <div className=\"card-body\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"traitTitle\"></label>\n                            <input type=\"text\" className=\"form-control bg-dark\" name=\"title\" id=\"traitTitle\" aria-describedby=\"helpId\" placeholder=\"\" />\n                            <small id=\"helpId\" className=\"form-text text-muted\">Name of trait</small>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"traitDescription\"></label>\n                            <textarea className=\"form-control bg-dark\" name=\"description\" id=\"traitDescription\" placeholder=\"describe trait here\" rows=\"3\"></textarea>\n                        </div>\n                        <button type=\"button\" className=\"btn btn-danger\">Remove Trait</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default TraitCard;","import React, { Component } from 'react';\nimport TraitCard from '../components/TraitCard';\n\nexport default class Traits extends Component{\n    //retrieve array of current traits\n\n    render() {\n        return (\n        <div>\n            <button type=\"button\" className=\"btn btn-success\">Add Trait</button>\n\n            <TraitCard></TraitCard>\n        </div>\n        )\n    }\n}\n","import {Component, useState, useEffect} from 'react';\nimport ActionCard from '../components/ActionCard'\nconst Actions=({sendData})=> {\n    const [actions, setActions] = useState([{}])\n    const addNewAction = ()=>{\n        setActions([...actions, {/*whatever the action template is*/}])\n    }\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }\n    useEffect(()=>{callBackMethod(actions)}, [actions])\n    \n    return(\n        <div>\n            <button type=\"button\" className=\"btn btn-success\" onClick={addNewAction}>Add Action</button>\n                {actions.map((value, index)=>{\n                    <ActionCard></ActionCard>\n                })}\n        </div>\n    )\n}\nexport default Actions;","import { Component } from \"react\";\nexport default class ActionCard extends Component {\n    render() {\n        return (\n            <div>\n            {/* remove buton for each card  */}\n        <div className=\"card text-white bg-dark mb-3 d-inline-block\">\n            <div className=\"card-header\">Action Card</div>\n            <div className=\"card-body\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"actionTitle\"></label>\n                  <input type=\"text\" className=\"form-control bg-dark\" name=\"title\" id=\"actionTitle\" aria-describedby=\"helpId\" placeholder=\"\"/>\n                  <small id=\"helpId\" className=\"form-text text-muted\">Name of action</small>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"actionDescription\"></label>\n                  <textarea className=\"form-control bg-dark\" name=\"description\" id=\"actionDescription\" placeholder=\"describe aciton here\" rows=\"3\"></textarea>\n                </div>\n                <button type=\"button\" className=\"btn btn-danger\">Remove Action</button>\n            </div>\n        </div>\n        </div>\n        )\n    }\n}","import {useState, useEffect} from 'react'\nconst ChallengeRating = ({sendData})=>{\n    const [cr, setCr] = useState(\"\")\n    const crs = [\"0\", \"1/8\", \"1/4\", \"1/2\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"]\n    const callBackMethod=(value)=>{\n        sendData(value);\n    }   \n    useEffect(()=>{callBackMethod(cr)}, [cr])\n    return(\n        <div className=\"form-group\">\n          <label htmlFor=\"crForm\">Challenge Rating</label>\n          <select className=\"form-control bg-dark text-light\" name=\"\" id=\"crForm\" onChange={e=>{setCr(e.target.value)}}>\n            {crs.map((value, index)=>{\n                return <option key={index} value={value}>{value}</option>;\n            })}\n          </select>\n        </div>\n    )\n}\nexport default ChallengeRating;","//import problem for some reason it is not exported, currently putting in this file\n//import { toXML } from \"../devLogic/export.js\";\nconst toXML = (stateObject) => {\n    let xmlDocumentString = \"\";\n    xmlDocumentString += \"<monster>\\n\"\n    if (stateObject.name) {\n        xmlDocumentString += \"<name>\" + stateObject.name + \"</name>\\n\"\n    } else {\n        console.error(\"no name given\");\n    }\n    if (stateObject.size) {\n        xmlDocumentString += \"<size>\" + stateObject.size + \"</size>\\n\"\n    }\n    if (stateObject.type) {\n        xmlDocumentString += \"<type>\" + stateObject.type + \"</type>\\n\"\n    }\n    if (stateObject.alignment) {\n        xmlDocumentString += \"<alignment>\" + stateObject.alignment + \"</alignment>\\n\"\n    }\n    if (stateObject.ac) {\n        xmlDocumentString += \"<ac>\" + stateObject.ac + \"</ac>\\n\"\n    }\n    if (stateObject.hp) {\n        xmlDocumentString += \"<hp>\" + stateObject.hp + \"</hp>\\n\"\n    }\n    if (stateObject.speed) {\n        xmlDocumentString += \"<speed>\" + stateObject.speed + \"</speed>\\n\"\n    }\n    if (stateObject.stats.str) {\n        xmlDocumentString += \"<str>\" + stateObject.stats.str + \"</str>\\n\"\n    }\n    if (stateObject.stats.dex) {\n        xmlDocumentString += \"<dex>\" + stateObject.stats.dex + \"</dex>\\n\"\n    }\n    if (stateObject.stats.con) {\n        xmlDocumentString += \"<con>\" + stateObject.stats.con + \"</con>\\n\"\n    }\n    if (stateObject.stats.int) {\n        xmlDocumentString += \"<int>\" + stateObject.stats.int + \"</int>\\n\"\n    }\n    if (stateObject.stats.wis) {\n        xmlDocumentString += \"<wis>\" + stateObject.stats.wis + \"</wis>\\n\"\n    }\n    if (stateObject.stats.cha) {\n        xmlDocumentString += \"<cha>\" + stateObject.stats.cha + \"</cha>\\n\"\n    }\n\n    //saves is trickier than the rest\n    if (stateObject.saves) {\n        xmlDocumentString += \"<saves>\" + stateObject.saves + \"</saves>\\n\"\n    }\n    //same with skills\n    if (stateObject.skills) {\n        xmlDocumentString += \"<skills>\" + stateObject.skills + \"</skills>\\n\"\n    }\n    //also res,immune, and vuln\n\n    if (stateObject.senses) {\n        xmlDocumentString += \"<senses>\" + stateObject.senses + \"</senses>\\n\"\n    }\n    if (stateObject.passive) {\n        xmlDocumentString += \"<passive>\" + stateObject.passive + \"</passive>\\n\"\n    }\n    if (stateObject.languages) {\n        xmlDocumentString += \"<languages>\" + stateObject.languages + \"</languages>\\n\"\n    }\n    if (stateObject.cr) {\n        xmlDocumentString += \"<cr>\" + stateObject.cr + \"</cr>\\n\"\n    }\n    //traits actions and legendary?\n    //finish xml\n    xmlDocumentString += \"</monster>\"\n    console.log(xmlDocumentString)\n    return xmlDocumentString;\n    //do stuff with it now!\n}\n\nconst Output = ({ state }) => {\n    const outputString = toXML(state);\n    return (\n            <div class=\"jumbotron bg-dark text-light\">\n                <h1 class=\"display-3\">Output:</h1>\n                <p style={{whiteSpace: \"pre-wrap\"}}>{outputString}</p>\n            </div>\n                \n    )\n}\nexport default Output;","import Conditions from '../components/Conditions';\nimport DamageTypes from '../components/DamageTypes';\nimport Saves from '../components/Saves';\nimport Skills from '../components/Skills';\nimport Stats from '../components/stats';\nimport Traits from './Traits';\nimport Actions from './Actions';\nimport ChallengeRating from '../components/ChallengeRating';\nimport Output from './output';\nconst { render } = require(\"@testing-library/react\")\nconst { Component } = require(\"react\")\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            type: '',\n            stats: {\n                str: 10,\n                dex: 10,\n                con: 10,\n                int: 10,\n                wis: 10,\n                cha: 10,\n            },\n            hp: '',\n            ac: '',\n            languages: '',\n            size: '',\n            alignment: '',\n            speed: '',\n            cr: '',\n            senses: '',\n            passive: '',\n            savingThrows: {\n                str: '',\n                dex: '',\n                con: '',\n                int: '',\n                wis: '',\n                cha: '',\n            },\n            skills: {\n                Athletics: '',\n                Acrobatics: '',\n                SleightOfHand: '',\n                Stealth: '',\n                Arcana: '',\n                History: '',\n                Investigation: '',\n                Nature: '',\n                Religion: '',\n                AnimalHandling: '',\n                Insight: '',\n                Medicine: '',\n                Perception: '',\n                Survival: '',\n                Deception: '',\n                Intimidation: '',\n                Performance: '',\n                Persuasion: '',\n            },\n            resistances: {\n                Slashing: false,\n                Piercing: false,\n                Bludgeoning: false,\n                Poison: false,\n                Acid: false,\n                Fire: false,\n                Cold: false,\n                Radiant: false,\n                Necrotic: false,\n                Lightning: false,\n                Thunder: false,\n                Force: false,\n                Psychic: false,\n            },\n            immunities: {\n                Slashing: false,\n                Piercing: false,\n                Bludgeoning: false,\n                Poison: false,\n                Acid: false,\n                Fire: false,\n                Cold: false,\n                Radiant: false,\n                Necrotic: false,\n                Lightning: false,\n                Thunder: false,\n                Force: false,\n                Psychic: false,\n            },\n            vulnerabilities: {\n                Slashing: false,\n                Piercing: false,\n                Bludgeoning: false,\n                Poison: false,\n                Acid: false,\n                Fire: false,\n                Cold: false,\n                Radiant: false,\n                Necrotic: false,\n                Lightning: false,\n                Thunder: false,\n                Force: false,\n                Psychic: false,\n            },\n            conditionImmunities: {\n                Blinded: false,\n                Charmed: false,\n                Deafened: false,\n                Exhaustion: false,\n                Frightened: false,\n                Grappled: false,\n                Incapacitated: false,\n                Invisible: false,\n                Paralyzed: false,\n                Petrified: false,\n                Poisoned: false,\n                Prone: false,\n                Restrained: false,\n                Stunned: false,\n                Unconscious: false,\n\n            },\n            traits: [],\n            actions: [],\n            legendaryActions: [],\n            description: \"\",\n            environment: \"\"\n\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.render = this.render.bind(this);\n        this.getDataFromStats = this.getDataFromStats.bind(this);\n        this.getDataFromSaves = this.getDataFromSaves.bind(this);\n        this.getDataFromSkills = this.getDataFromSkills.bind(this);\n        this.getDataFromDamageTypes = this.getDataFromDamageTypes.bind(this)\n        this.getDataFromChallengeRating = this.getDataFromChallengeRating.bind(this)\n        this.getDataFromActions = this.getDataFromActions.bind(this)\n        this.getDataFromConditions = this.getDataFromConditions.bind(this)\n    }\n    //gets data sent from stats via prop, assigns to state.stats\n    getDataFromStats(data) {\n        this.setState({stats: data})\n    }\n    getDataFromSaves(data) {\n        this.setState({savingThrows: data})\n    }\n    getDataFromSkills(data) {\n        this.setState({skills: data})\n    }\n    getDataFromDamageTypes(data) {\n        //retrieves the array of objects from Damage types component, then sets each part of state to the correct object. \n        this.setState({resistances: data[0], immunities: data[1], vulnerabilities: data[2]})\n    }\n    getDataFromChallengeRating(data){\n        this.setState({cr: data});\n    }\n    getDataFromActions(data){\n        //TODO\n        this.setState({actions: data});\n    }\n    getDataFromTraits(data){\n        //TODO\n        this.setState({traits: data});\n    }\n    getDataFromConditions(data){\n        this.setState({conditionImmunities: data})\n    }\n    //processes elements directly on this component/container\n    handleChange(event) {\n        const target = event.target\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({ [name]: value });\n    }\n\n    render() {\n        return (\n            <form>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"nameInput\">Name</label>\n                        <input type=\"text\" id=\"nameInput\" placeholder=\"creature name\" name=\"name\" value={this.state.name} onChange={this.handleChange} className=\"form-control bg-dark  text-light\" />\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"typeInput\">Type</label>\n                        <input type=\"text\" id=\"typeInput\" placeholder=\"Humanoid, monstrosity, etc\" name=\"type\" value={this.state.type} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"sizeInput\">Size</label>\n                        <input type=\"text\" id=\"sizeInput\" placeholder=\"Small, Medium, Large, Huge\" name=\"size\" value={this.state.size} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"alignmentInput\">Alignment</label>\n                        <input type=\"text\" id=\"alignmentInput\" placeholder=\"Lawful good, neutral evil, ect.\" name=\"alignment\" value={this.state.alignment} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"hpInput\">hp</label>\n                        <input type=\"text\" id=\"hpInput\" placeholder=\"optional: can be done automatically from stats\" name=\"hp\" value={this.state.hp} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"armorInput\">AC</label>\n                        <input type=\"text\" id=\"armorInput\" placeholder=\"12, light armor\" name=\"ac\" value={this.state.ac} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"speedInput\">Speed</label>\n                        <input type=\"text\" id=\"speedInput\" placeholder=\" walk 30 ft., fly 50 ft. \" name=\"speed\" value={this.state.speed} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"nameInput\">Languages</label>\n                        <input type=\"text\" id=\"nameInput\" placeholder=\"Common, Elvish, Abyssal.\" name=\"languages\" value={this.state.languages} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"senseInput\"> Senses </label>\n                        <input type=\"text\" id=\"senseInput\" placeholder=\"Darkvision 60 ft.\" name=\"senses\" value={this.state.senses} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                    </div>\n                </div>\n                <ChallengeRating state={this.state} value={this.state.stats} sendData={this.getDataFromChallengeRating}></ChallengeRating>\n                <hr></hr>\n                {/* This.handlechange will be executed from within stats each method within needs to use it.  It will be passed the state to update the displayed value.  alternatively, what if Stats had a value prop, which equals state.stats\n                \n                sendData should be child object\n                */}\n                <Stats state={this.state} value={this.state.stats} sendData={this.getDataFromStats}></Stats>\n                <div>\n                    <label>\n                        Saving Throws\n                    </label>\n                    <Saves onChange={this.handleChange} state={this.state} sendData={this.getDataFromSaves}></Saves>\n                </div>\n                <div>\n                    <label>\n                        Skills\n                    </label>\n                    <Skills sendData={this.getDataFromSkills}></Skills>\n                </div>\n                passive Perception calculated by 10+perception(Wis)\n                <div>\n                    <label>\n                        <i className=\"fa fa-fist-raised\" aria-hidden=\"true\"></i>= normal, R= Resistance, I= immunity, V=Vulnerability\n                    </label>\n                    <DamageTypes state={this.state}></DamageTypes>\n                </div>\n                <div>\n                    <label>\n                        Condition Immunities\n                    </label>\n                    <Conditions onChange={this.handleChange} sendData={this.getDataFromConditions}></Conditions>\n                </div>\n                <h3>Traits</h3>\n                <Traits onChange={this.handleChange} state={this.state} sendData={this.getDataFromTraits}></Traits>\n                <h3>Actions</h3>\n                <Actions onChange={this.handleChange} state={this.state} sendData={this.getDataFromActions}></Actions>\n                {/* <div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\"></label>\n                        <textarea className=\"form-control\" name=\"description\" id=\"description\" rows=\"3\" placeholder=\"relevant description here\" ></textarea>\n                        {onChange={this.handleChange} value={this.state.description}}\n                    </div>\n                </div> */}\n                <div className=\"\">\n                    <label htmlFor=\"environmentInput\"> Environment </label>\n                    <input type=\"text\" id=\"senseInput\" placeholder=\"Mountain, hills, etc.\" name=\"environment\" value={this.state.environment} onChange={this.handleChange} className=\"form-control bg-dark text-light\"></input>\n                </div>\n                <Output state={this.state}></Output>\n            </form>\n        )\n    }\n}\nexport default Form;","import logo from './logo.svg';\nimport Form from './containers/form'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>XML Monster Muncher</h1>\n      </header>\n        <Form></Form>\n      <footer>\n        <a href=\"https://github.com/sbrevolution5/xml-monster-muncher\">Contribute on Github <i className=\"fa fa-github\" aria-hidden=\"true\"></i></a>\n        <p><i className=\"fa fa-copyright\" aria-hidden=\"true\"></i> Seth A. Burleson 2021</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}